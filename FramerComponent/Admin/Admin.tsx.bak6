import React, { useState, useEffect, SetStateAction } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { addPropertyControls, ControlType } from "framer"
// 프레이머 단독 실행 환경을 고려하여 미리보기용 컴포넌트를 파일 내부에 정의합니다
function InlineNameSection({
    groomName,
    brideName,
    style,
}: {
    groomName: string
    brideName: string
    style?: React.CSSProperties
}) {
    const getFontSize = (a: string, b: string): number => {
        const len = Math.max(a?.length || 0, b?.length || 0)
        if (len <= 8) return 48
        if (len <= 12) return 40
        if (len <= 16) return 34
        return 28
    }
    const fontSize = getFontSize(groomName, brideName)
    return (
        <div
            style={{
                width: "100%",
                height: 240,
                minWidth: 320,
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                paddingBottom: 12,
                boxSizing: "border-box",
                ...style,
            }}
        >
            <div
                style={{
                    fontFamily: "P22LateNovemberW01-Regular Regular",
                    fontSize,
                    textAlign: "center",
                    lineHeight: 1.1,
                    whiteSpace: "nowrap",
                    overflow: "hidden",
                }}
            >
                {(groomName || "GROOM").toUpperCase()}
            </div>
            <div style={{ margin: 12, height: 42 }}>
                <svg
                    width="73"
                    height="42"
                    viewBox="0 0 73 42"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <g clipPath="url(#clip0_preview_inline_and)">
                        <path
                            d="M70.4 0C63.88 0 56.2 16.39 50.7 29.06C50.29 27.43 49.22 26.46 47.54 26.46C44.51 26.46 40.97 29.2 38.94 32.79C38.67 33.07 38.34 33.49 37.91 34.05C36.08 36.39 32.77 40.62 31.19 40.62C30.73 40.62 30.53 40.42 30.53 40.11C30.53 39.3 31.29 37.72 32.21 35.89C33.38 33.55 34.75 30.8 34.75 28.86C34.75 27.74 34.34 27.28 33.48 27.28C32.56 27.28 28.49 30.64 26.1 33.34C27.07 31.41 28.19 29.07 28.19 27.18C28.19 25.29 27.17 24.89 26.26 24.89C24.73 24.89 22.29 28.05 19.49 31.66L18.57 32.83C18.57 32.83 18.53 32.9 18.5 32.93C18.49 32.95 18.48 32.96 18.46 32.98C13.93 38.99 11.89 40.77 10.93 40.77C10.47 40.77 10.37 40.26 10.37 39.8C10.37 37.82 13.17 32.72 14.8 29.93C15 29.57 15.11 29.37 15.11 29.22C15.11 29.07 15.01 29.02 14.91 29.02C14.6 29.02 13.74 29.07 13.18 29.17C12.42 29.32 12.01 29.88 10.89 31.87C9.47 34.36 5.04 40.27 3.26 40.27C2.65 40.27 2.39 39.91 2.39 39.2C2.39 35.48 7.78 27.03 13.89 27.03C15.72 27.03 16.79 27.74 17.4 28.96C17.5 29.16 17.65 29.27 17.81 29.27C18.01 29.27 18.17 29.12 18.17 28.91C18.17 28.81 18.12 28.71 18.07 28.6C17.25 26.97 15.88 26.26 13.95 26.26C7.18 26.26 0 32.93 0 39.29C0 40.77 0.92 41.53 2.19 41.53C4.43 41.53 7.03 38.73 8.76 36.34C8.56 37.1 8.4 37.87 8.4 38.78C8.4 40 9.01 41.63 10.64 41.63C12.27 41.63 13.74 40.41 19.39 32.98C19.4 32.96 19.4 32.96 19.41 32.94C19.55 32.77 19.7 32.58 19.9 32.32C22.85 28.45 24.94 25.75 25.96 25.75C26.37 25.75 26.47 26.06 26.47 26.46C26.47 27.78 23.26 34.1 19.6 40.46C19.5 40.61 19.45 40.77 19.45 40.87C19.45 41.23 20.26 41.94 20.72 41.94C20.92 41.94 21.13 41.84 21.33 41.58C22.2 40.56 23.06 39.19 24.74 36.24C25.66 34.61 29.17 30.94 31.61 29.27C31.76 29.17 31.86 29.12 32.02 29.12C32.22 29.12 32.38 29.27 32.38 29.53C32.38 29.63 32.33 29.84 32.23 30.04C31.92 30.75 31.57 31.52 31.16 32.28C29.94 34.72 28.62 37.47 28.62 39.46C28.62 40.48 29.13 41.55 30.81 41.55C32.49 41.55 35.19 38.7 37.53 35.75L37.85 35.34C37.52 36.39 37.33 37.47 37.33 38.55C37.33 40.64 38.3 41.65 39.42 41.65C41.51 41.65 45.07 38.29 49.19 32.74C48.94 33.4 48.68 34.27 48.58 34.62C47.77 37.47 47.05 38.74 45.32 40.27C44.61 40.88 44.45 41.03 44.45 41.24C44.45 41.39 44.6 41.6 44.81 41.6C45.02 41.6 45.17 41.5 45.32 41.4C46.13 40.84 46.54 40.69 46.8 40.69C47.11 40.69 47.36 40.84 47.61 41C48.02 41.25 48.43 41.51 49.09 41.51C51.03 41.51 53.32 38.61 55.86 35.3L57.39 33.31C57.59 33.06 57.7 32.9 57.7 32.85C57.7 32.75 57.6 32.6 57.39 32.6C57.24 32.6 56.98 32.7 56.68 33.06C56.07 33.77 55.3 34.69 54.59 35.61C52.6 38.15 50.57 40.7 49.09 40.7C48.63 40.7 48.33 40.5 48.02 40.29L47.61 40.09C48.68 39.27 49.39 38.21 50.1 36.78C50.2 36.58 50.51 35.81 50.97 34.64C54.01 26.82 64.5 0.97 70.76 0.97C71.32 0.97 71.68 1.07 71.93 1.28C72.18 1.48 72.34 1.53 72.49 1.53C72.69 1.53 72.85 1.38 72.85 1.17C72.85 0.76 72.09 0 70.41 0H70.4ZM40.32 40.26C39.96 40.26 39.66 39.9 39.66 39.24C39.66 35.98 43.58 27.33 47.75 27.33C49.23 27.33 49.89 29.06 49.94 30.33C48.01 33.13 42.36 40.26 40.32 40.26Z"
                            fill="black"
                        />
                    </g>
                    <defs>
                        <clipPath id="clip0_preview_inline_and">
                            <rect width="72.85" height="41.94" fill="white" />
                        </clipPath>
                    </defs>
                </svg>
            </div>
            <div
                style={{
                    fontFamily: "P22LateNovemberW01-Regular Regular",
                    fontSize,
                    textAlign: "center",
                    lineHeight: 1.1,
                    whiteSpace: "nowrap",
                    overflow: "hidden",
                }}
            >
                {(brideName || "BRIDE").toUpperCase()}
            </div>
        </div>
    )
}

function InlinePhotoSection({
    imageUrl,
    displayDateTime,
    location,
    overlayPosition = "bottom",
    overlayTextColor = "#ffffff",
    style,
}: {
    imageUrl?: string
    displayDateTime?: string
    location?: string
    overlayPosition?: "top" | "bottom"
    overlayTextColor?: "#ffffff" | "#000000"
    style?: React.CSSProperties
}) {
    const containerStyle: React.CSSProperties = {
        width: "100%",
        height: 640,
        position: "relative",
        overflow: "hidden",
        ...style,
    }

    if (!imageUrl) {
        return (
            <div style={containerStyle}>
                <div
                    style={{
                        position: "absolute",
                        inset: 0,
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        background: "#f5f5f5",
                        color: "#6b7280",
                        fontFamily: "'Pretendard Regular', sans-serif",
                        fontSize: 14,
                        letterSpacing: 0.2,
                    }}
                >
                    사진을 업로드 해주세요
                </div>
            </div>
        )
    }

    return (
        <div style={containerStyle}>
            <img
                src={imageUrl}
                alt="Wedding couple"
                style={{
                    width: "100%",
                    height: "100%",
                    objectFit: "cover",
                    objectPosition: "center",
                }}
            />
            {(displayDateTime || location) && (
                <div
                    style={{
                        position: "absolute",
                        width: "100%",
                        textAlign: "center",
                        color: overlayTextColor,
                        fontFamily: "'Pretendard Regular', sans-serif",
                        fontSize: "15px",
                        lineHeight: 1.4,
                        zIndex: 10,
                        textShadow:
                            overlayTextColor === "#ffffff"
                                ? "0px 1px 4px rgba(0,0,0,0.25)"
                                : "none",
                        ...(overlayPosition === "top"
                            ? { top: 40 }
                            : { bottom: 40 }),
                    }}
                >
                    {displayDateTime && (
                        <div style={{ marginBottom: 5 }}>{displayDateTime}</div>
                    )}
                    {location && <div>{location}</div>}
                </div>
            )}
        </div>
    )
}

// 캘린더 미리보기 (단독 미리보기용, 외부 의존 없음)
function InlineCalendarPreview({
    date,
    hour,
    minute,
    groomName,
    brideName,
    highlightColor = "#e0e0e0",
    highlightShape = "circle",
    highlightTextColor = "black",
}: {
    date?: string
    hour?: string
    minute?: string
    groomName?: string
    brideName?: string
    highlightColor?: string
    highlightShape?: "circle" | "heart"
    highlightTextColor?: "black" | "white" | "#000000" | "#ffffff"
}) {
    const parseDate = () => {
        if (!date) return null
        try {
            const d = new Date(date)
            if (isNaN(d.getTime())) return null
            return d
        } catch {
            return null
        }
    }

    const targetDate = parseDate()
    const year = targetDate
        ? targetDate.getFullYear()
        : new Date().getFullYear()
    const monthIndex = targetDate
        ? targetDate.getMonth()
        : new Date().getMonth()
    const day = targetDate ? targetDate.getDate() : null

    const getDaysInMonth = (y: number, m: number) =>
        new Date(y, m + 1, 0).getDate()
    const getFirstDayOfMonth = (y: number, m: number) =>
        new Date(y, m, 1).getDay()

    const daysInMonth = getDaysInMonth(year, monthIndex)
    const firstDay = getFirstDayOfMonth(year, monthIndex)
    const totalCells = daysInMonth + firstDay
    const actualWeeks = Math.ceil(totalCells / 7)

    const weeks: (number | null)[][] = []
    for (let col = 0; col < 7; col++) {
        const colDays: (number | null)[] = []
        let startDate = col - firstDay + 1
        for (let w = 0; w < actualWeeks; w++) {
            if (startDate > 0 && startDate <= daysInMonth) {
                colDays.push(startDate)
            } else {
                colDays.push(null)
            }
            startDate += 7
        }
        weeks.push(colDays)
    }

    const formatDateTime = (): string => {
        if (!targetDate) return ""
        const d = new Date(targetDate)
        const h24 = parseInt(hour || "0")
        const mm = parseInt(minute || "0")
        d.setHours(h24, mm)
        const dayNames = [
            "일요일",
            "월요일",
            "화요일",
            "수요일",
            "목요일",
            "금요일",
            "토요일",
        ]
        const ampm = h24 < 12 ? "오전" : "오후"
        const h12 = h24 === 0 ? 12 : h24 > 12 ? h24 - 12 : h24
        const minuteText = mm !== 0 ? ` ${mm}분` : ""
        return `${d.getFullYear()}년 ${d.getMonth() + 1}월 ${d.getDate()}일 ${dayNames[d.getDay()]} ${ampm} ${h12}시${minuteText}`
    }

    const dayNamesShort = ["S", "M", "T", "W", "T", "F", "S"]

    const isHighlighted = (d: number | null) => {
        if (!targetDate || d === null) return false
        return d === day
    }

    const calculateDday = () => {
        try {
            if (!date) return "D-00일"
            const today = new Date()
            const target = new Date(date)
            today.setHours(0, 0, 0, 0)
            target.setHours(0, 0, 0, 0)
            const diff = target.getTime() - today.getTime()
            const days = Math.ceil(diff / (1000 * 3600 * 24))
            if (days > 0) return `D-${days.toString().padStart(2, "0")}일`
            if (days === 0) return "D-DAY"
            return `D+${Math.abs(days).toString().padStart(2, "0")}일`
        } catch {
            return "D-00일"
        }
    }

    const textColorCss =
        highlightTextColor === "white" || highlightTextColor === "#ffffff"
            ? "#ffffff"
            : "#000000"

    return (
        <div
            style={{
                width: "100%",
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
            }}
        >
            <div
                style={{
                    fontSize: 16,
                    lineHeight: "1.8em",
                    fontFamily: "Pretendard Regular",
                    textAlign: "center",
                    marginBottom: 20,
                }}
            >
                {formatDateTime()}
            </div>
            <div
                style={{
                    fontSize: 50,
                    lineHeight: "1.8em",
                    fontFamily: "P22LateNovemberW01-Regular Regular",
                    textAlign: "center",
                    marginBottom: 20,
                }}
            >
                {monthIndex + 1}
            </div>
            <div
                style={{
                    display: "flex",
                    flexDirection: "row",
                    gap: 11,
                    padding: "0 20px 0 20px",
                    alignItems: "flex-start",
                    justifyContent: "center",
                }}
            >
                {weeks.map((col, colIdx) => (
                    <div
                        key={colIdx}
                        style={{
                            display: "flex",
                            flexDirection: "column",
                            alignItems: "center",
                            textAlign: "center",
                        }}
                    >
                        <div
                            style={{
                                fontSize: 15,
                                lineHeight: "2.6em",
                                fontFamily: "Pretendard SemiBold",
                                marginBottom: 5,
                            }}
                        >
                            {dayNamesShort[colIdx]}
                        </div>
                        {col.map((d, idx) => (
                            <div
                                key={idx}
                                style={{
                                    position: "relative",
                                    display: "flex",
                                    alignItems: "center",
                                    justifyContent: "center",
                                    width: 31,
                                    height: 31,
                                    marginBottom: 2,
                                }}
                            >
                                {d !== null ? (
                                    <>
                                        {isHighlighted(d) &&
                                            (highlightShape === "heart" ? (
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    width="24"
                                                    height="21"
                                                    viewBox="0 0 16 14"
                                                    fill="none"
                                                    style={{
                                                        position: "absolute",
                                                        top: "50%",
                                                        left: "50%",
                                                        transform:
                                                            "translate(-50%, -40%)",
                                                        zIndex: 0,
                                                    }}
                                                >
                                                    <g clipPath="url(#clip0_calendar_preview)">
                                                        <g
                                                            style={{
                                                                mixBlendMode:
                                                                    "multiply" as const,
                                                            }}
                                                        >
                                                            <path
                                                                d="M8.21957 1.47997C8.08957 1.59997 7.99957 1.73997 7.87957 1.85997C7.75957 1.73997 7.66957 1.59997 7.53957 1.47997C3.08957 -2.76003 -2.51043 2.94997 1.21957 7.84997C2.91957 10.08 5.58957 11.84 7.86957 13.43C10.1596 11.83 12.8196 10.08 14.5196 7.84997C18.2596 2.94997 12.6596 -2.76003 8.19957 1.47997H8.21957Z"
                                                                fill={
                                                                    highlightColor
                                                                }
                                                            />
                                                        </g>
                                                    </g>
                                                    <defs>
                                                        <clipPath id="clip0_calendar_preview">
                                                            <rect
                                                                width="15.76"
                                                                height="13.44"
                                                                fill="white"
                                                            />
                                                        </clipPath>
                                                    </defs>
                                                </svg>
                                            ) : (
                                                <div
                                                    style={{
                                                        position: "absolute",
                                                        width: 31,
                                                        height: 31,
                                                        borderRadius: "50%",
                                                        backgroundColor:
                                                            highlightColor,
                                                        zIndex: 0,
                                                    }}
                                                />
                                            ))}
                                        <div
                                            style={{
                                                fontSize: 15,
                                                lineHeight: "2.6em",
                                                color: isHighlighted(d)
                                                    ? textColorCss
                                                    : undefined,
                                                fontFamily: isHighlighted(d)
                                                    ? "Pretendard SemiBold"
                                                    : "Pretendard Regular",
                                                zIndex: 1,
                                                position: "relative",
                                            }}
                                        >
                                            {d}
                                        </div>
                                    </>
                                ) : (
                                    <div style={{ width: 31, height: 31 }} />
                                )}
                            </div>
                        ))}
                    </div>
                ))}
            </div>
            <div
                style={{
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "center",
                    marginTop: 40,
                }}
            >
                <div
                    style={{
                        fontSize: 17,
                        lineHeight: "1em",
                        fontFamily: "Pretendard Regular",
                        textAlign: "center",
                        marginBottom: 10,
                    }}
                >
                    {groomName || ""} ♥ {brideName || ""}의 결혼식
                </div>
                <div
                    style={{
                        fontSize: 17,
                        lineHeight: "1em",
                        fontFamily: "Pretendard SemiBold",
                        textAlign: "center",
                    }}
                >
                    {calculateDday()}
                </div>
            </div>
        </div>
    )
}

// 프록시 서버 URL (고정된 Production URL)
const PROXY_BASE_URL = "https://wedding-admin-proxy.vercel.app"

// 세션 토큰 관리
function getAuthToken() {
    return localStorage.getItem("admin_session")
}

function setAuthToken(token: string): void {
    localStorage.setItem("admin_session", token)
}

function removeAuthToken() {
    localStorage.removeItem("admin_session")
}

// 인증 관련 함수들
async function authenticateAdmin(
    username: string,
    password: string
): Promise<any> {
    console.log("Login attempt:", {
        username,
        url: `${PROXY_BASE_URL}/api/user-management`,
    })

    try {
        const response = await fetch(`${PROXY_BASE_URL}/api/user-management`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                action: "login",
                username,
                password,
            }),
        })

        console.log("Response status:", response.status)
        console.log("Response headers:", response.headers)

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`)
        }

        const result = await response.json()
        console.log("Response data:", result)

        if (result.success) {
            setAuthToken(result.token)
            return {
                success: true,
                user: result.user,
            }
        } else {
            return {
                success: false,
                error: result.error,
            }
        }
    } catch (error: any) {
        console.error("Login error details:", error)
        return {
            success: false,
            error: `네트워크 오류: ${error.message}`,
        }
    }
}

function generateSessionToken(user: { id: string; username: string }): string {
    return btoa(
        JSON.stringify({
            userId: user.id,
            username: user.username,
            expires: Date.now() + 24 * 60 * 60 * 1000,
        })
    )
}

function validateSessionToken(
    token: string
): { userId: string; username: string; expires: number } | null {
    try {
        const data = JSON.parse(atob(token))
        return Date.now() < data.expires ? data : null
    } catch {
        return null
    }
}

// 이미지 관련 함수들
async function getAllPages(): Promise<any> {
    try {
        const response = await fetch(
            `${PROXY_BASE_URL}/api/images?action=getAllPages`,
            {
                headers: {
                    Authorization: `Bearer ${getAuthToken()}`,
                },
            }
        )

        const result = await response.json()
        return result.success ? result.data : []
    } catch (error) {
        console.error("Get pages error:", error)
        return []
    }
}

async function getImagesByPageId(pageId: string): Promise<any> {
    try {
        const response = await fetch(
            `${PROXY_BASE_URL}/api/images?action=getByPageId&pageId=${pageId}`,
            {
                headers: {
                    Authorization: `Bearer ${getAuthToken()}`,
                },
            }
        )

        const result = await response.json()
        return result.success ? result.data : []
    } catch (error) {
        console.error("Get images error:", error)
        return []
    }
}

// 이미지 삭제 함수
async function deleteImage(imageId: string, fileName: string): Promise<any> {
    try {
        const response = await fetch(`${PROXY_BASE_URL}/api/images`, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${getAuthToken()}`,
            },
            body: JSON.stringify({
                imageId,
                fileName,
            }),
        })

        return await response.json()
    } catch (error) {
        console.error("Delete image error:", error)
        return {
            success: false,
            error: "이미지 삭제 중 오류가 발생했습니다",
        }
    }
}

// Supabase display_order 업데이트 함수
async function updateImageOrder(
    imageId: string,
    newOrder: number
): Promise<any> {
    try {
        const response = await fetch(`${PROXY_BASE_URL}/api/images`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${getAuthToken()}`,
            },
            body: JSON.stringify({
                imageId,
                newOrder,
            }),
        })

        return await response.json()
    } catch (error) {
        console.error("Update image order error:", error)
        return {
            success: false,
            error: "이미지 순서 업데이트 중 오류가 발생했습니다",
        }
    }
}

// 연락처 관련 함수들
async function getAllContacts(pageId: string | null = null): Promise<any> {
    try {
        let url = `${PROXY_BASE_URL}/api/contacts`
        if (pageId) {
            url += `?pageId=${pageId}`
        }

        const response = await fetch(url, {
            headers: {
                Authorization: `Bearer ${getAuthToken()}`,
            },
        })

        const result = await response.json()
        return result.success ? result.data : []
    } catch (error) {
        console.error("Get contacts error:", error)
        return []
    }
}

async function saveContact(contactData: any): Promise<any> {
    try {
        const isUpdate = !!contactData.id
        const method = isUpdate ? "PUT" : "POST"

        const response = await fetch(`${PROXY_BASE_URL}/api/contacts`, {
            method,
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${getAuthToken()}`,
            },
            body: JSON.stringify(contactData),
        })

        return await response.json()
    } catch (error) {
        console.error("Save contact error:", error)
        return {
            success: false,
            error: "연락처 저장 중 오류가 발생했습니다",
        }
    }
}

async function deleteContact(id: string): Promise<any> {
    try {
        const response = await fetch(`${PROXY_BASE_URL}/api/contacts`, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${getAuthToken()}`,
            },
            body: JSON.stringify({ id }),
        })

        return await response.json()
    } catch (error) {
        console.error("Delete contact error:", error)
        return {
            success: false,
            error: "연락처 삭제 중 오류가 발생했습니다",
        }
    }
}

// 타입 선언
interface PageInfo {
    page_id: string
    image_count: number
}
interface ImageInfo {
    id: string
    filename: string
    public_url: string
    original_name: string
}
interface ContactInfo {
    id?: string
    page_id: string
    groom_name: string
    groom_phone: string
    groom_account: string
    groom_bank: string
    groom_father_name: string
    groom_father_phone: string
    groom_father_account: string
    groom_father_bank: string
    groom_mother_name: string
    groom_mother_phone: string
    groom_mother_account: string
    groom_mother_bank: string
    bride_name: string
    bride_phone: string
    bride_account: string
    bride_bank: string
    bride_father_name: string
    bride_father_phone: string
    bride_father_account: string
    bride_father_bank: string
    bride_mother_name: string
    bride_mother_phone: string
    bride_mother_account: string
    bride_mother_bank: string
    created_at?: string
    updated_at?: string
}

// presigned URL 관련 함수들
async function getPresignedUrl(fileName: string, pageId: string): Promise<any> {
    try {
        const requestBody = {
            action: "getPresignedUrl",
            fileName,
            pageId,
        }

        // 디버깅을 위한 로그 추가
        console.log("=== getPresignedUrl Debug ===")
        console.log("requestBody:", requestBody)
        console.log("PROXY_BASE_URL:", PROXY_BASE_URL)
        console.log("============================")

        const response = await fetch(`${PROXY_BASE_URL}/api/images`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${getAuthToken()}`,
            },
            body: JSON.stringify(requestBody),
        })

        console.log("Response status:", response.status)
        console.log("Response headers:", response.headers)

        const result = await response.json()
        console.log("Response result:", result)

        if (!result.success) throw new Error(result.error)
        return result
    } catch (error: unknown) {
        console.error("Get presigned URL error:", error)
        const message = error instanceof Error ? error.message : String(error)
        throw new Error("presigned URL 요청 실패: " + message)
    }
}

async function uploadToPresignedUrl(url: string, file: File): Promise<void> {
    try {
        const response = await fetch(url, {
            method: "PUT",
            headers: {
                "Content-Type": file.type,
            },
            body: file,
        })

        if (!response.ok) {
            throw new Error(`Storage 업로드 실패: ${response.status}`)
        }
    } catch (error: unknown) {
        console.error("Upload to presigned URL error:", error)
        const message = error instanceof Error ? error.message : String(error)
        throw new Error("파일 업로드 실패: " + message)
    }
}

async function saveImageMeta(
    pageId: string,
    fileName: string,
    order: number,
    storagePath: string,
    fileSize: number
): Promise<any> {
    try {
        const response = await fetch(`${PROXY_BASE_URL}/api/images`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${getAuthToken()}`,
            },
            body: JSON.stringify({
                action: "saveMeta",
                pageId,
                fileName,
                displayOrder: order,
                storagePath,
                fileSize,
            }),
        })

        const result = await response.json()
        if (!result.success) throw new Error(result.error)
        return result.data
    } catch (error: unknown) {
        console.error("Save image meta error:", error)
        const message = error instanceof Error ? error.message : String(error)
        throw new Error("메타데이터 저장 실패: " + message)
    }
}

// 이미지 압축 관련 함수들 추가
function validateImageFileSize(file: File): void {
    const MAX_ORIGINAL_SIZE = 100 * 1024 * 1024 // 100MB
    const allowedTypes = ["image/jpeg", "image/png", "image/gif", "image/webp"]

    if (file.size > MAX_ORIGINAL_SIZE) {
        throw new Error(
            `원본 파일이 너무 큽니다. 최대 ${MAX_ORIGINAL_SIZE / (1024 * 1024)}MB까지 지원합니다.`
        )
    }

    if (!allowedTypes.includes(file.type)) {
        throw new Error(
            "지원되지 않는 파일 형식입니다 (JPEG, PNG, GIF, WebP만 허용)"
        )
    }
}

// 기본 이미지 압축 함수
async function compressImage(
    file: File,
    maxSizeKB = 1024,
    quality = 0.8
): Promise<File> {
    return new Promise((resolve, reject) => {
        const canvas = document.createElement("canvas")
        const ctx = canvas.getContext("2d")
        const img = new Image()

        img.onload = () => {
            let { width, height } = img

            // 적절한 크기 계산 (품질 저하 최소화)
            const MAX_WIDTH = 1920
            const MAX_HEIGHT = 1080

            if (width > MAX_WIDTH) {
                height = (height * MAX_WIDTH) / width
                width = MAX_WIDTH
            }

            if (height > MAX_HEIGHT) {
                width = (width * MAX_HEIGHT) / height
                height = MAX_HEIGHT
            }

            canvas.width = width
            canvas.height = height

            // 렌더링 품질 설정 (고품질)
            if (ctx) {
                ctx.imageSmoothingEnabled = true
                ctx.imageSmoothingQuality = "high"

                // 배경 설정 (투명도 제거)
                ctx.fillStyle = "white"
                ctx.fillRect(0, 0, width, height)
                ctx.drawImage(img, 0, 0, width, height)
            }

            // 반복적 압축 (품질 유지하면서 크기 조정)
            const compressRecursive = (
                currentQuality: number,
                attempt = 0
            ): void => {
                if (attempt > 8) {
                    // 최대 8번 시도 (품질 저하 최소화)
                    canvas.toBlob(
                        (blob) => {
                            if (!blob) {
                                reject(new Error("압축 실패"))
                                return
                            }
                            const finalFile = new File([blob], file.name, {
                                type: "image/jpeg",
                                lastModified: Date.now(),
                            })
                            resolve(finalFile)
                        },
                        "image/jpeg",
                        Math.max(0.3, currentQuality) // 최소 품질 0.3 유지
                    )
                    return
                }

                canvas.toBlob(
                    (blob) => {
                        if (!blob) {
                            reject(new Error("압축 실패"))
                            return
                        }

                        const fileSizeKB = blob.size / 1024

                        if (fileSizeKB <= maxSizeKB || currentQuality <= 0.3) {
                            const compressedFile = new File([blob], file.name, {
                                type: "image/jpeg",
                                lastModified: Date.now(),
                            })
                            resolve(compressedFile)
                        } else {
                            // 품질을 점진적으로 낮춤 (작은 단위로)
                            const newQuality = Math.max(
                                0.3,
                                currentQuality - 0.05
                            )
                            compressRecursive(newQuality, attempt + 1)
                        }
                    },
                    "image/jpeg",
                    currentQuality
                )
            }

            compressRecursive(quality)
        }

        img.onerror = () => reject(new Error("이미지 로드 실패"))
        img.src = URL.createObjectURL(file)
    })
}

// 단계적 압축 함수 (대용량 파일용)
async function progressiveCompress(
    file: File,
    targetSizeKB = 1024,
    onProgress?: (progress: number) => void
): Promise<any> {
    const originalSize = file.size

    try {
        // 파일이 이미 작으면 압축하지 않음
        if (originalSize / 1024 <= targetSizeKB) {
            return {
                compressedFile: file,
                originalSize,
                compressedSize: originalSize,
                compressionRatio: 1,
                method: "no_compression",
            }
        }

        onProgress?.(10)

        // 1단계: 큰 파일의 경우 사전 리사이징
        let processedFile = file
        if (originalSize > 10 * 1024 * 1024) {
            // 10MB 이상 - 더 작은 크기로
            processedFile = await compressImage(file, targetSizeKB, 0.9)
            onProgress?.(40)
        } else if (originalSize > 5 * 1024 * 1024) {
            // 5MB 이상 - 적당한 크기로
            processedFile = await compressImage(file, targetSizeKB, 0.85)
            onProgress?.(35)
        }

        // 2단계: 기본 압축
        onProgress?.(50)
        let compressedFile = await compressImage(
            processedFile,
            targetSizeKB,
            0.8
        )

        // 3단계: 여전히 크면 추가 압축
        if (compressedFile.size / 1024 > targetSizeKB) {
            onProgress?.(70)
            compressedFile = await compressImage(
                processedFile,
                targetSizeKB,
                0.6
            )
        }

        // 4단계: 최종 압축 (최소 품질 유지)
        if (compressedFile.size / 1024 > targetSizeKB) {
            onProgress?.(90)
            compressedFile = await compressImage(
                processedFile,
                targetSizeKB,
                0.4
            )
        }

        onProgress?.(100)
        const compressedSize = compressedFile.size
        const compressionRatio = originalSize / compressedSize

        return {
            compressedFile,
            originalSize,
            compressedSize,
            compressionRatio,
            method: "progressive_compression",
        }
    } catch (error: unknown) {
        console.error("압축 실패:", error)
        const message = error instanceof Error ? error.message : String(error)
        throw new Error(`이미지 압축에 실패했습니다: ${message}`)
    }
}

export default function AdminNew(props: any) {
    const { maxSizeKB = 1024, style } = props

    // 공통 상태
    const [isAuthenticated, setIsAuthenticated] = useState(false)
    const [currentUser, setCurrentUser] = useState<any>(null)
    const [loginForm, setLoginForm] = useState({ username: "", password: "" })
    const [loginError, setLoginError] = useState("")
    const [isLoggingIn, setIsLoggingIn] = useState(false)
    // 아코디언 상태 관리
    const [openSections, setOpenSections] = useState({
        name: true, // "성함" 섹션은 기본적으로 열림
        photo: false,
        invite: false,
        transport: false,
        calendar: false,
        images: false,
        contacts: false,
        account: false,
        kakaoShare: false,
    })
    const [currentPageId, setCurrentPageId] = useState("")
    // 페이지 선택/리스트 관련 로직 제거 (사전 부여된 page_id만 사용)
    const [assignedPageId, setAssignedPageId] = useState<string | null>(null)

    // 이미지 관련 상태
    const [existingImages, setExistingImages] = useState<ImageInfo[]>([])
    const [showImageManager, setShowImageManager] = useState(true)
    const [uploading, setUploading] = useState(false)
    const [progress, setProgress] = useState(0)
    const [uploadSuccess, setUploadSuccess] = useState(0)
    const [imagesVersion, setImagesVersion] = useState<number>(0)

    // 청첩장 상태 및 업데이트 함수
    const [inviteData, setInviteData] = useState({
        invitationText:
            "저희 두 사람이 하나 되는 약속의 시간에\n마음을 담아 소중한 분들을 모십니다.\n\n귀한 걸음으로 축복해 주시면 감사하겠습니다.",
        groomFatherName: "",
        groomMotherName: "",
        groomName: "",
        brideFatherName: "",
        brideMotherName: "",
        brideName: "",
        showGroomFatherChrysanthemum: false,
        showGroomMotherChrysanthemum: false,
        showBrideFatherChrysanthemum: false,
        showBrideMotherChrysanthemum: false,
        sonLabel: "아들",
        daughterLabel: "딸",
    })

    const updateInviteField = (
        field: keyof typeof inviteData,
        value: string | boolean
    ) => {
        setInviteData((prev) => ({ ...prev, [field]: value }))
    }

    // 청첩장 API 연동 상태/함수
    const [inviteSaving, setInviteSaving] = useState(false)

    const loadInviteData = async (): Promise<void> => {
        if (!currentPageId) return
        try {
            const res = await fetch(
                `${PROXY_BASE_URL}/api/invite?pageId=${encodeURIComponent(currentPageId)}`,
                {
                    method: "GET",
                    headers: { "Content-Type": "application/json" },
                }
            )
            if (!res.ok) return
            const result = await res.json()
            if (result?.success && result?.data) {
                const d = result.data
                setInviteData((prev) => ({
                    invitationText: d.invitation_text ?? prev.invitationText,
                    groomFatherName:
                        d.groom_father_name ?? prev.groomFatherName,
                    groomMotherName:
                        d.groom_mother_name ?? prev.groomMotherName,
                    groomName: pageSettings.groom_name_kr || prev.groomName,
                    brideFatherName:
                        d.bride_father_name ?? prev.brideFatherName,
                    brideMotherName:
                        d.bride_mother_name ?? prev.brideMotherName,
                    brideName: pageSettings.bride_name_kr || prev.brideName,
                    showGroomFatherChrysanthemum:
                        !!d.show_groom_father_chrysanthemum,
                    showGroomMotherChrysanthemum:
                        !!d.show_groom_mother_chrysanthemum,
                    showBrideFatherChrysanthemum:
                        !!d.show_bride_father_chrysanthemum,
                    showBrideMotherChrysanthemum:
                        !!d.show_bride_mother_chrysanthemum,
                    sonLabel: d.son_label ?? prev.sonLabel,
                    daughterLabel: d.daughter_label ?? prev.daughterLabel,
                }))
            } else {
                setInviteData((prev) => ({
                    ...prev,
                    groomName: pageSettings.groom_name_kr || prev.groomName,
                    brideName: pageSettings.bride_name_kr || prev.brideName,
                }))
            }
        } catch (_err) {
            // noop
        }
    }

    const saveInviteData = async (): Promise<void> => {
        try {
            setInviteSaving(true)
            const body = {
                invite: {
                    invitation_text: inviteData.invitationText,
                    groom_father_name: inviteData.groomFatherName,
                    groom_mother_name: inviteData.groomMotherName,
                    groom_name:
                        pageSettings.groom_name_kr || inviteData.groomName,
                    bride_father_name: inviteData.brideFatherName,
                    bride_mother_name: inviteData.brideMotherName,
                    bride_name:
                        pageSettings.bride_name_kr || inviteData.brideName,
                    show_groom_father_chrysanthemum:
                        inviteData.showGroomFatherChrysanthemum,
                    show_groom_mother_chrysanthemum:
                        inviteData.showGroomMotherChrysanthemum,
                    show_bride_father_chrysanthemum:
                        inviteData.showBrideFatherChrysanthemum,
                    show_bride_mother_chrysanthemum:
                        inviteData.showBrideMotherChrysanthemum,
                    son_label: inviteData.sonLabel,
                    daughter_label: inviteData.daughterLabel,
                },
            }
            const res = await fetch(`${PROXY_BASE_URL}/api/invite`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${getAuthToken()}`,
                },
                body: JSON.stringify(body),
            })
            const text = await res.text()
            let result: any = {}
            try {
                result = JSON.parse(text)
            } catch {
                result = { raw: text }
            }
            if (!res.ok || !result?.success) {
                const msg =
                    result?.message ||
                    result?.error ||
                    text ||
                    "초대장 저장 실패"
                const code = result?.code ? ` (code: ${result.code})` : ""
                setError(`청첩장 저장 중 오류: ${msg}${code}`)
            } else {
                setSuccess("청첩장 정보가 저장되었습니다.")
                // 저장 후 재로드로 동기화
                await loadInviteData()
            }
        } catch (_e) {
            setError("청첩장 저장 중 오류가 발생했습니다.")
        } finally {
            setInviteSaving(false)
        }
    }

    useEffect(() => {
        loadInviteData() // 아코디언에서는 항상 로드
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [currentPageId])

    // 연락처 관련 상태
    const [contactList, setContactList] = useState<ContactInfo[]>([])
    const [selectedContact, setSelectedContact] = useState<ContactInfo | null>(
        null
    )
    const [isEditingContact, setIsEditingContact] = useState(false)
    const [loading, setLoading] = useState(false)
    const [error, setError] = useState<string | null>(null)
    const [success, setSuccess] = useState<string | null>(null)

    // 페이지 설정 관련 상태
    const [pageSettings, setPageSettings] = useState({
        groom_name_kr: "",
        groom_name_en: "",
        bride_name_kr: "",
        bride_name_en: "",
        wedding_date: "",
        wedding_hour: "14",
        wedding_minute: "00",
        venue_name: "",
        venue_address: "",
        photo_section_image_url: "",
        photo_section_image_path: "",
        photo_section_overlay_position: "bottom",
        photo_section_overlay_color: "#ffffff",
        photo_section_locale: "en",
        highlight_shape: "circle",
        highlight_color: "#e0e0e0",
        highlight_text_color: "black",
        gallery_type: "thumbnail",
    })
    const [settingsLoading, setSettingsLoading] = useState(false)
    const [compressProgress, setCompressProgress] = useState<number | null>(
        null
    )

    // 미리보기용 포맷터 및 프롭 빌더
    const formatPhotoDisplayDateTime = (): string => {
        const locale =
            (pageSettings.photo_section_locale as "en" | "kr") || "kr"
        const dateStr = pageSettings.wedding_date
        if (!dateStr) return ""
        try {
            // 안전한 날짜 파싱 (UTC 오프셋 문제 방지)
            const [y, m, d] = dateStr.split("-").map((v) => parseInt(v, 10))
            if (!y || !m || !d) return ""
            const dt = new Date(y, m - 1, d)
            const year = y.toString()
            const mm = m.toString().padStart(2, "0")
            const dd = d.toString().padStart(2, "0")

            const weekdayIdx = dt.getDay()
            const weekdayEn = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"][
                weekdayIdx
            ]
            const weekdayKr = [
                "일요일",
                "월요일",
                "화요일",
                "수요일",
                "목요일",
                "금요일",
                "토요일",
            ][weekdayIdx]

            const hour24 = parseInt(pageSettings.wedding_hour || "0", 10)
            const periodEn = hour24 < 12 ? "AM" : "PM"
            const periodKr = hour24 < 12 ? "오전" : "오후"
            const hour12 = hour24 % 12 === 0 ? 12 : hour24 % 12

            if (locale === "en") {
                // 2025. 10. 25. SAT. 12 PM
                return `${year}. ${mm}. ${dd}. ${weekdayEn}. ${hour12} ${periodEn}`
            }
            // 2025. 10. 25. 토요일 오후 12시
            return `${year}. ${mm}. ${dd}. ${weekdayKr} ${periodKr} ${hour12}시`
        } catch {
            return ""
        }
    }

    const buildNameSectionProps = () => ({
        groomName:
            pageSettings.groom_name_en || pageSettings.groom_name_kr || "GROOM",
        brideName:
            pageSettings.bride_name_en || pageSettings.bride_name_kr || "BRIDE",
    })

    const [photoSectionPreviewUrl, setPhotoSectionPreviewUrl] = React.useState<
        string | null
    >(null)
    const [photoSectionImageVersion, setPhotoSectionImageVersion] =
        React.useState<number>(0)

    const addPhotoVersionParam = (url?: string): string | undefined => {
        if (!url) return url
        const sep = url.includes("?") ? "&" : "?"
        return `${url}${sep}v=${photoSectionImageVersion}`
    }

    const getPhotoSectionDisplayUrl = (): string | undefined => {
        const constructedUrl = pageSettings.photo_section_image_path
            ? `https://yjlzizakdjghpfduxcki.supabase.co/storage/v1/object/public/images/${pageSettings.photo_section_image_path}`
            : undefined
        const derivedPublicUrl = (pageSettings as any)
            .photo_section_image_public_url as string | undefined
        const serverUrl =
            derivedPublicUrl ||
            pageSettings.photo_section_image_url ||
            constructedUrl
        // objectURL 최우선, 그 다음 파생 URL, 그 외는 버전 파라미터 부여
        if (photoSectionPreviewUrl) return photoSectionPreviewUrl
        if (derivedPublicUrl) return derivedPublicUrl
        return addPhotoVersionParam(serverUrl)
    }

    const buildPhotoSectionProps = () => {
        return {
            imageUrl: getPhotoSectionDisplayUrl(),
            displayDateTime: formatPhotoDisplayDateTime(),
            location: pageSettings.venue_name || undefined,
            overlayPosition:
                (pageSettings.photo_section_overlay_position as
                    | "top"
                    | "bottom") || "bottom",
            overlayTextColor:
                (pageSettings.photo_section_overlay_color as
                    | "#ffffff"
                    | "#000000") || "#ffffff",
        }
    }

    // 초대글 텍스트 포맷팅(볼드/인용) 삽입
    const insertInviteFormat = (format: "bold" | "quote") => {
        const textarea = document.getElementById(
            "inviteTextArea"
        ) as HTMLTextAreaElement | null
        if (!textarea) return
        const start = textarea.selectionStart
        const end = textarea.selectionEnd
        const selected = inviteData.invitationText.substring(start, end)
        const before = inviteData.invitationText.substring(0, start)
        const after = inviteData.invitationText.substring(end)

        if (format === "bold") {
            const newText = selected
                ? `${before}*${selected}*${after}`
                : `${before}*텍스트*${after}`
            updateInviteField("invitationText", newText)
            const cursor = selected ? start + selected.length + 2 : start + 1
            setTimeout(() => {
                textarea.focus()
                textarea.setSelectionRange(cursor, cursor)
            }, 0)
            return
        }
        if (format === "quote") {
            const newText = selected
                ? `${before}{${selected}}${after}`
                : `${before}{텍스트}${after}`
            updateInviteField("invitationText", newText)
            const cursor = selected ? start + selected.length + 2 : start + 1
            setTimeout(() => {
                textarea.focus()
                textarea.setSelectionRange(cursor, cursor)
            }, 0)
        }
    }

    // 초대글 미리보기: InviteName.tsx 렌더링 로직과 동일한 스타일 구현
    const renderBoldSegmentsPreview = (
        text: string,
        baseStyle?: React.CSSProperties
    ): JSX.Element[] => {
        const out: JSX.Element[] = []
        let last = 0
        let key = 0
        const re = /\*([^*]+)\*/g
        let m: RegExpExecArray | null
        while ((m = re.exec(text)) !== null) {
            const start = m.index
            const end = start + m[0].length
            if (start > last) {
                const chunk = text.slice(last, start)
                if (chunk)
                    out.push(
                        <span key={`nb-${key++}`} style={baseStyle}>
                            {chunk}
                        </span>
                    )
            }
            const boldText = m[1]
            out.push(
                <span
                    key={`b-${key++}`}
                    style={{
                        ...(baseStyle || {}),
                        fontFamily: "Pretendard SemiBold",
                    }}
                >
                    {boldText}
                </span>
            )
            last = end
        }
        if (last < text.length) {
            const rest = text.slice(last)
            if (rest)
                out.push(
                    <span key={`nb-${key++}`} style={baseStyle}>
                        {rest}
                    </span>
                )
        }
        return out
    }

    const renderInvitationSegmentsPreview = (text: string): JSX.Element[] => {
        const lines = (text || "").split("\n")
        const rendered: JSX.Element[] = []
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i]
            const parts: JSX.Element[] = []
            let lastIndex = 0
            let keySeq = 0
            const regex = /\{([^}]*)\}/g
            let match: RegExpExecArray | null
            while ((match = regex.exec(line)) !== null) {
                const start = match.index
                const end = start + match[0].length
                if (start > lastIndex) {
                    const chunk = line.slice(lastIndex, start)
                    if (chunk)
                        parts.push(
                            <span key={`t-${i}-${keySeq++}`}>
                                {renderBoldSegmentsPreview(chunk)}
                            </span>
                        )
                }
                const inner = match[1]
                if (inner)
                    parts.push(
                        <span
                            key={`q-${i}-${keySeq++}`}
                            style={{
                                fontSize: 14,
                                lineHeight: "1em",
                                color: "#6e6e6e",
                            }}
                        >
                            {renderBoldSegmentsPreview(inner, {
                                fontSize: 14,
                                lineHeight: "1em",
                                color: "#6e6e6e",
                            })}
                        </span>
                    )
                lastIndex = end
            }
            if (lastIndex < line.length) {
                const rest = line.slice(lastIndex)
                if (rest)
                    parts.push(
                        <span key={`t-${i}-${keySeq++}`}>
                            {renderBoldSegmentsPreview(rest)}
                        </span>
                    )
            }
            rendered.push(
                <span key={`line-${i}`}>
                    {parts}
                    {i !== lines.length - 1 && <br />}
                </span>
            )
        }
        return rendered
    }

    function InlineChrysanthemumIcon() {
        return (
            <div
                style={{
                    width: 13,
                    height: 19,
                    display: "inline-flex",
                    alignItems: "center",
                    justifyContent: "center",
                }}
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="13"
                    height="20"
                    viewBox="0 0 13 20"
                    fill="none"
                >
                    <path
                        d="M8.13164 1.0899C8.27511 0.760965 8.52941 0.404781 8.89141 0.522519C9.37558 0.6834 9.59449 1.15577 9.66973 1.68268C9.89531 1.75563 9.99814 2.01813 10.0174 2.31158C10.229 2.09849 10.4358 1.93762 10.6404 1.85162C10.852 1.76379 11.2472 1.71843 11.4188 1.90143C11.7126 2.20801 11.4463 2.93957 11.2889 3.31158C11.5476 3.17333 11.8016 3.07789 12.0271 3.04791C12.279 3.01987 12.6975 3.12835 12.785 3.35455C12.8879 3.6406 12.6692 4.10757 12.4979 4.3692C12.6622 4.4215 12.9417 4.58788 12.991 4.77838C13.0715 5.1503 12.6158 5.6257 12.3289 5.85943C12.5133 6.20282 12.3054 6.49529 11.9314 6.73541C12.2043 7.62814 12.3261 8.56591 11.8328 9.00689C11.4026 8.96195 11.0141 8.75024 10.6854 8.3858C10.5087 9.37846 9.71434 8.87405 9.20879 8.39361C9.08635 8.77305 8.90331 9.12311 8.59551 9.27643C8.36285 9.1007 8.1841 8.89651 8.04766 8.61236C7.86841 8.87682 7.59335 9.15184 7.29961 9.05475C6.13161 11.374 5.21645 13.5711 4.51738 15.8467C4.64714 15.6993 4.78105 15.5601 4.91973 15.4317C4.97571 15.3364 5.08425 15.1911 5.13848 15.1182C5.70524 14.3518 6.37492 13.482 7.15508 12.9268C7.52417 12.6501 7.93391 12.417 8.35723 12.2188C8.38508 12.2058 8.42496 12.2054 8.45293 12.2256C8.51416 12.2556 8.5426 12.3292 8.50762 12.3946L8.31719 12.8184C8.93116 12.3214 9.7448 12.1685 10.3797 12.4395C10.4005 12.4397 10.4146 12.4526 10.4285 12.46C10.4546 12.4899 10.4753 12.5331 10.4822 12.5704C10.4891 12.6207 10.468 12.6654 10.4471 12.6934C10.428 12.7158 10.4216 12.7381 10.4285 12.753C10.4355 12.781 10.4759 12.8184 10.5301 12.8389C11.1248 13.0595 11.6844 13.3869 12.2039 13.8038C12.2179 13.8187 12.2251 13.8337 12.2391 13.8467C12.253 13.8766 12.2529 13.9144 12.2459 13.9424C12.2388 13.9796 12.2175 14.0076 12.1844 14.0225C11.5967 14.3664 10.9599 14.5547 10.4002 14.5547C10.5103 14.665 10.6049 14.8037 10.6609 14.9942C10.6662 15.0297 10.6728 15.0602 10.6658 15.0958C10.6465 15.1833 10.5787 15.2483 10.5037 15.2559H10.4402L8.92363 14.9424L8.93828 15.1026L8.93047 15.1407C8.92346 15.1704 8.91135 15.1912 8.89043 15.2061C8.86258 15.2209 8.84139 15.2204 8.81524 15.2129L8.61113 15.1631C7.74348 14.9295 7.0517 14.7967 6.15606 14.9874C5.53607 15.4061 4.74301 16.1078 4.21758 16.8809C3.98195 17.7357 3.77429 18.6052 3.59453 19.5001C3.41789 19.4496 3.34921 19.4632 3.16387 19.4053C3.32378 17.9507 3.61474 16.4362 4.01934 14.9346C4.03998 14.1363 3.92715 13.3055 3.7791 12.6866C3.25256 11.8996 2.66415 11.4899 1.87871 11.0225L1.69414 10.9122C1.6749 10.8972 1.66028 10.877 1.64629 10.8546C1.63931 10.8247 1.64699 10.7969 1.66094 10.7745L1.67461 10.7442L1.78984 10.6358L0.485157 9.75104C0.471172 9.73612 0.452098 9.72112 0.445118 9.70807C0.389194 9.64077 0.381665 9.54721 0.423634 9.46686C0.444571 9.44447 0.464067 9.42194 0.491993 9.40143C0.65634 9.30618 0.813922 9.26862 0.969532 9.26861C0.560309 8.86109 0.212243 8.26118 0.00761836 7.57525C-0.00630065 7.54546 0.00056894 7.51036 0.0144543 7.48053C0.0266994 7.45249 0.0548249 7.42258 0.0828137 7.4151C0.0949872 7.40766 0.115656 7.40728 0.136525 7.40729C0.778518 7.48019 1.40178 7.65575 1.96856 7.92682C2.02974 7.95483 2.0773 7.96227 2.10527 7.94732C2.11909 7.93239 2.12578 7.91162 2.12578 7.88189C2.13104 7.83893 2.1455 7.80144 2.18047 7.77154C2.20673 7.7437 2.24878 7.72857 2.28887 7.72857C2.30965 7.72865 2.32371 7.7358 2.34453 7.74322C2.97253 8.01242 3.47094 8.7216 3.60039 9.52545L3.73125 9.08014C3.75053 9.01476 3.81947 8.9773 3.88067 8.99225C3.90864 9.00721 3.94301 9.03561 3.95 9.06549C4.13368 9.51789 4.27746 9.99267 4.38067 10.46C4.5776 11.4286 4.51712 12.5474 4.43535 13.5245C5.02805 11.6658 5.7898 9.8626 6.6834 8.25396C6.64679 8.0852 6.63418 7.90435 6.64141 7.72076C6.43499 7.61234 6.381 7.32587 6.40899 7.03424C6.16934 7.20248 5.93623 7.31847 5.71758 7.36334C5.49192 7.41381 5.10321 7.37137 4.95977 7.15826C4.74786 6.83305 5.04871 6.2589 5.27422 5.90045C5.24042 5.88056 5.21022 5.86126 5.1834 5.84186C4.96039 5.89966 4.75449 5.92755 4.57012 5.90924C4.31122 5.88867 3.91406 5.70508 3.87383 5.46393C3.81817 5.16485 4.11928 4.74863 4.33086 4.52252C4.17351 4.43471 3.92797 4.21579 3.9207 4.01959C3.90567 3.74787 4.1754 3.47883 4.44707 3.28424C4.14649 2.58832 4.00703 1.89122 4.34649 1.44928C4.77664 1.41193 5.19286 1.53712 5.58281 1.836C5.583 0.821311 6.45133 1.15585 7.03203 1.53717C7.09326 1.13527 7.21033 0.748652 7.4832 0.543027C7.74353 0.668191 7.95511 0.836021 8.13164 1.0899Z"
                        fill="black"
                    />
                </svg>
            </div>
        )
    }

    const dotNeededLocal = (a?: string, b?: string) => !!(a && b)

    // 아코디언 토글 함수
    const toggleSection = (sectionName: keyof typeof openSections) => {
        setOpenSections((prev) => ({
            ...prev,
            [sectionName]: !prev[sectionName],
        }))
    }

    const initialContactData = {
        page_id: "",
        groom_name: "",
        groom_phone: "",
        groom_account: "",
        groom_bank: "",
        groom_father_name: "",
        groom_father_phone: "",
        groom_father_account: "",
        groom_father_bank: "",
        groom_mother_name: "",
        groom_mother_phone: "",
        groom_mother_account: "",
        groom_mother_bank: "",
        bride_name: "",
        bride_phone: "",
        bride_account: "",
        bride_bank: "",
        bride_father_name: "",
        bride_father_phone: "",
        bride_father_account: "",
        bride_father_bank: "",
        bride_mother_name: "",
        bride_mother_phone: "",
        bride_mother_account: "",
        bride_mother_bank: "",
    }

    // 임시 테스트 함수 (디버깅용)
    // 이미지 순서 테스트용 함수 제거됨

    // 이미지 순서 변경 관련 함수들 (컴포넌트 내부로 이동)
    // 이미지 순서 변경 (로컬 상태만 변경)
    const handleReorderImages = (fromIndex: number, toIndex: number) => {
        const newImages = [...existingImages]
        const [movedImage] = newImages.splice(fromIndex, 1)
        newImages.splice(toIndex, 0, movedImage)

        // 로컬 상태만 업데이트 (서버 저장은 별도)
        setExistingImages(newImages)
        setHasUnsavedChanges(true)

        console.log("로컬 순서 변경:", {
            fromIndex,
            toIndex,
            newLength: newImages.length,
        })
    }

    // 서버에 순서 변경사항 저장
    const saveImageOrder = async () => {
        if (!hasUnsavedChanges) {
            alert("변경사항이 없습니다.")
            return
        }

        try {
            setIsSavingOrder(true)

            // 순서 변경 API 호출
            const requestBody = {
                action: "updateAllOrders",
                pageId: currentPageId,
                imageOrders: existingImages
                    .map((img, idx) => ({
                        id: img.id,
                        order: idx + 1,
                    }))
                    .filter((item) => item.id), // id가 있는 것만 필터링
            }

            // 안전 검사
            if (requestBody.imageOrders.length === 0) {
                throw new Error("유효한 이미지 ID가 없습니다")
            }

            console.log("순서 저장 API 요청:", requestBody)

            const response = await fetch(`${PROXY_BASE_URL}/api/images`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${getAuthToken()}`,
                },
                body: JSON.stringify(requestBody),
            })

            console.log("API 응답 상태:", response.status, response.statusText)

            if (!response.ok) {
                const errorText = await response.text()
                console.error("HTTP 오류:", response.status, errorText)
                throw new Error(`HTTP ${response.status}: ${errorText}`)
            }

            const result = await response.json()
            console.log("순서 저장 API 응답:", result)

            if (!result.success) {
                throw new Error(result.error || "순서 저장에 실패했습니다")
            }

            // 성공 시 상태 초기화
            setHasUnsavedChanges(false)
            setOriginalOrder([...existingImages])

            alert("이미지 순서가 성공적으로 저장되었습니다!")
        } catch (err) {
            console.error("순서 저장 실패:", err)
            alert(
                "순서 저장에 실패했습니다: " +
                    (err instanceof Error ? err.message : "알 수 없는 오류")
            )
        } finally {
            setIsSavingOrder(false)
        }
    }

    // 변경사항 취소 (원래 순서로 복원)
    const cancelOrderChanges = () => {
        if (!hasUnsavedChanges) return

        if (confirm("변경사항을 취소하고 원래 순서로 되돌리시겠습니까?")) {
            setExistingImages([...originalOrder])
            setHasUnsavedChanges(false)
        }
    }

    const moveImageUp = (index: number) => {
        if (index > 0) handleReorderImages(index, index - 1)
    }

    const moveImageDown = (index: number) => {
        if (index < existingImages.length - 1)
            handleReorderImages(index, index + 1)
    }

    const moveImageToPosition = (fromIndex: number, toPosition: number) => {
        if (
            toPosition >= 1 &&
            toPosition <= existingImages.length &&
            toPosition !== fromIndex + 1
        ) {
            handleReorderImages(fromIndex, toPosition - 1)
        }
    }

    // 선택된 이미지들 상태 추가
    const [selectedImages, setSelectedImages] = useState<Set<string>>(new Set())

    // 순서 변경 관련 상태
    const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)
    const [isSavingOrder, setIsSavingOrder] = useState(false)
    const [originalOrder, setOriginalOrder] = useState<ImageInfo[]>([])

    const handleDeleteImage = async (imageId: string, fileName: string) => {
        if (!confirm("정말로 이 이미지를 삭제하시겠습니까?")) return

        try {
            // 낙관적 업데이트 - 즉시 UI에서 제거
            const imageToDelete = existingImages.find(
                (img) => img.id === imageId
            )
            setExistingImages((prev) =>
                prev.filter((img) => img.id !== imageId)
            )

            const result = await deleteImage(imageId, fileName)

            if (!result.success) {
                // 실패 시 원래 상태로 복원
                if (imageToDelete) {
                    setExistingImages((prev) => [...prev, imageToDelete])
                }
                alert("이미지 삭제에 실패했습니다: " + result.error)
            } else {
                // 성공 시 페이지 목록만 업데이트 (이미지 목록은 이미 업데이트됨)
                loadAllPages()
            }
        } catch (err) {
            console.error("이미지 삭제 실패:", err)
            // 실패 시 원래 상태로 복원
            const imageToDelete = existingImages.find(
                (img) => img.id === imageId
            )
            if (imageToDelete) {
                setExistingImages((prev) => [...prev, imageToDelete])
            }
            alert(
                "이미지 삭제에 실패했습니다: " +
                    (err instanceof Error ? err.message : "알 수 없는 오류")
            )
        }
    }

    // 여러 이미지 삭제 함수
    const handleDeleteMultipleImages = async () => {
        if (selectedImages.size === 0) {
            alert("삭제할 이미지를 선택해주세요.")
            return
        }

        const confirmMessage =
            selectedImages.size === 1
                ? "정말로 이 이미지를 삭제하시겠습니까?"
                : `정말로 선택된 ${selectedImages.size}개의 이미지를 삭제하시겠습니까?`

        if (!confirm(confirmMessage)) return

        try {
            // 선택된 이미지들 찾기
            const imagesToDelete = existingImages.filter((img) =>
                selectedImages.has(img.id)
            )

            // 낙관적 업데이트 - 즉시 UI에서 제거
            setExistingImages((prev) =>
                prev.filter((img) => !selectedImages.has(img.id))
            )

            // 모든 이미지 삭제 요청
            const deletePromises = imagesToDelete.map((img) =>
                deleteImage(img.id, img.filename)
            )

            const results = await Promise.all(deletePromises)
            const allSuccess = results.every((result) => result.success)

            if (allSuccess) {
                // 성공 시 페이지 목록만 업데이트
                loadAllPages()
                setSelectedImages(new Set()) // 선택 초기화
            } else {
                // 실패 시 원래 상태로 복원
                setExistingImages((prev) => [...prev, ...imagesToDelete])
                alert("일부 이미지 삭제에 실패했습니다.")
            }
        } catch (err) {
            console.error("다중 이미지 삭제 실패:", err)
            // 실패 시 원래 상태로 복원
            const imagesToDelete = existingImages.filter((img) =>
                selectedImages.has(img.id)
            )
            setExistingImages((prev) => [...prev, ...imagesToDelete])
            alert(
                "이미지 삭제에 실패했습니다: " +
                    (err instanceof Error ? err.message : "알 수 없는 오류")
            )
        }
    }

    // 이미지 선택 토글
    const toggleImageSelection = (imageId: string) => {
        setSelectedImages((prev) => {
            const newSet = new Set(prev)
            if (newSet.has(imageId)) {
                newSet.delete(imageId)
            } else {
                newSet.add(imageId)
            }
            return newSet
        })
    }

    // 전체 선택/해제
    const toggleSelectAll = () => {
        if (selectedImages.size === existingImages.length) {
            setSelectedImages(new Set())
        } else {
            setSelectedImages(new Set(existingImages.map((img) => img.id)))
        }
    }

    // 세션 확인
    useEffect(() => {
        const token = localStorage.getItem("admin_session")
        if (token) {
            const tokenData = validateSessionToken(token)
            if (tokenData) {
                setIsAuthenticated(true)
                setCurrentUser({ username: tokenData.username })
                // 저장된 사전 할당 페이지 ID 적용 (관리자가 미리 설정한 경우)
                const storedAssigned = localStorage.getItem("assigned_page_id")
                if (storedAssigned && storedAssigned.trim().length > 0) {
                    setAssignedPageId(storedAssigned)
                    setCurrentPageId(storedAssigned)
                }
                loadAllPages()
                loadContactList()
            } else {
                localStorage.removeItem("admin_session")
            }
        }
    }, [])

    // 로그인/로그아웃
    const handleLogin = async (e: React.FormEvent) => {
        e.preventDefault()
        setIsLoggingIn(true)
        setLoginError("")

        const result = await authenticateAdmin(
            loginForm.username,
            loginForm.password
        )
        if (result.success) {
            localStorage.setItem(
                "admin_session",
                generateSessionToken(result.user)
            )
            setIsAuthenticated(true)
            setCurrentUser(result.user)
            // 로그인 사용자에 page_id가 할당되어 있으면 강제 적용 (비관리자용)
            const assigned =
                (result.user && (result.user as any).page_id) || null
            if (
                assigned &&
                typeof assigned === "string" &&
                assigned.trim().length > 0
            ) {
                setAssignedPageId(assigned)
                setCurrentPageId(assigned)
                localStorage.setItem("assigned_page_id", assigned)
            } else {
                setAssignedPageId(null)
                localStorage.removeItem("assigned_page_id")
            }
            setLoginForm({ username: "", password: "" })
            loadAllPages()
            loadContactList()
            loadPageSettings()
        } else {
            setLoginError(result.error)
        }
        setIsLoggingIn(false)
    }

    const handleLogout = () => {
        removeAuthToken()
        setIsAuthenticated(false)
        setCurrentUser(null)
        setCurrentPageId("")
        setAssignedPageId(null)
        // 페이지 리스트 사용 안함
        setExistingImages([])
        setContactList([])
        localStorage.removeItem("assigned_page_id")
    }

    // 데이터 로드
    // 페이지 리스트는 더 이상 사용하지 않음
    const loadAllPages = async () => {
        return
    }

    const loadExistingImages = async () => {
        if (currentPageId) {
            try {
                const images = await getImagesByPageId(currentPageId)
                const ts = Date.now() + imagesVersion
                const withVersion = images.map((img: any) => ({
                    ...img,
                    public_url: img.public_url
                        ? `${img.public_url}${img.public_url.includes("?") ? "&" : "?"}v=${ts}`
                        : img.public_url,
                }))
                setExistingImages(withVersion)
                setOriginalOrder([...images]) // 원본 순서 저장
            } catch (err) {
                console.error("이미지 목록 로드 실패:", err)
            }
        }
    }

    const loadContactList = async () => {
        setLoading(true)
        try {
            const contacts = await getAllContacts(currentPageId)
            setContactList(contacts)
        } catch (err) {
            setError("연락처 목록을 불러오는데 실패했습니다.")
        } finally {
            setLoading(false)
        }
    }

    const loadPageSettings = async () => {
        if (!currentPageId) return

        setSettingsLoading(true)
        try {
            const response = await fetch(
                `${PROXY_BASE_URL}/api/page-settings?pageId=${currentPageId}`,
                {
                    headers: {
                        Authorization: `Bearer ${getAuthToken()}`,
                    },
                }
            )

            const result = await response.json()
            if (result.success) {
                setPageSettings(result.data)
            }
        } catch (err) {
            console.error("페이지 설정 로드 실패:", err)
        } finally {
            setSettingsLoading(false)
        }
    }

    const allowedSettingKeys = [
        "groom_name_kr",
        "groom_name_en",
        "bride_name_kr",
        "bride_name_en",
        "wedding_date",
        "wedding_hour",
        "wedding_minute",
        "venue_name",
        "venue_address",
        "photo_section_image_url",
        "photo_section_image_path",
        "photo_section_overlay_position",
        "photo_section_overlay_color",
        "photo_section_locale",
        "highlight_shape",
        "highlight_color",
        "highlight_text_color",
        "gallery_type",
    ] as const

    type AllowedSettingKey = (typeof allowedSettingKeys)[number]

    function sanitizeSettingsForSave(
        input: any
    ): Record<AllowedSettingKey, any> {
        const out: Record<string, any> = {}
        for (const key of allowedSettingKeys) {
            if (Object.prototype.hasOwnProperty.call(input, key)) {
                out[key] = input[key]
            }
        }
        if (Object.prototype.hasOwnProperty.call(out, "wedding_date")) {
            if (out["wedding_date"] === "") {
                out["wedding_date"] = null
            }
        }
        return out as Record<AllowedSettingKey, any>
    }

    const savePageSettings = async (overrideSettings?: any) => {
        if (!currentPageId) return

        setSettingsLoading(true)
        try {
            const merged = overrideSettings
                ? { ...pageSettings, ...overrideSettings }
                : pageSettings
            const settingsToSave = sanitizeSettingsForSave(merged)
            console.log("Saving page settings:", {
                currentPageId,
                settings: settingsToSave,
            })

            const response = await fetch(
                `${PROXY_BASE_URL}/api/page-settings`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${getAuthToken()}`,
                    },
                    body: JSON.stringify({
                        pageId: currentPageId,
                        settings: settingsToSave,
                    }),
                }
            )

            console.log("Save response status:", response.status)

            if (!response.ok) {
                const errorText = await response.text()
                console.error("Save response error:", errorText)
                throw new Error(`HTTP ${response.status}: ${errorText}`)
            }

            const result = await response.json()
            console.log("Save response result:", result)

            if (result.success) {
                setSuccess("설정이 저장되었습니다.")
                // 저장 후 다시 로드해서 동기화
                setTimeout(() => loadPageSettings(), 500)
            } else {
                setError(
                    `설정 저장에 실패했습니다: ${result.error || "알 수 없는 오류"}`
                )
            }
        } catch (err) {
            console.error("Save page settings error:", err)
            const message = err instanceof Error ? err.message : String(err)
            setError(`설정 저장 중 오류가 발생했습니다: ${message}`)
        } finally {
            setSettingsLoading(false)
        }
    }

    // 포토섹션 메인 이미지 업로드 (압축 포함)
    const handlePhotoSectionImageUpload = async (
        event: React.ChangeEvent<HTMLInputElement>
    ) => {
        const file = event.target.files?.[0]
        if (!file || !currentPageId) return

        setSettingsLoading(true)
        try {
            // 로컬 미리보기 즉시 반영
            try {
                const nextUrl = URL.createObjectURL(file)
                if (photoSectionPreviewUrl)
                    URL.revokeObjectURL(photoSectionPreviewUrl)
                setPhotoSectionPreviewUrl(nextUrl)
            } catch {}

            // 0. 기존 이미지가 있다면 먼저 삭제
            const existingImagePath = pageSettings.photo_section_image_path
            const existingImageUrl = pageSettings.photo_section_image_url
            if (existingImagePath || existingImageUrl) {
                try {
                    // 경로에서 파일명 추출 (path 방식이 우선)
                    let oldFileName = existingImagePath
                    if (!oldFileName && existingImageUrl) {
                        // URL -> 스토리지 경로 추출
                        const marker = "/storage/v1/object/public/images/"
                        const idx = existingImageUrl.indexOf(marker)
                        if (idx !== -1) {
                            oldFileName = existingImageUrl.substring(
                                idx + marker.length
                            )
                        } else {
                            // fallback: 마지막 세그먼트만 있는 경우는 삭제 정확도가 떨어질 수 있음
                            oldFileName = existingImageUrl
                                .split("/")
                                .slice(-2)
                                .join("/")
                        }
                    }

                    if (oldFileName) {
                        console.log(
                            `기존 포토섹션 이미지 삭제 시도: ${oldFileName}`
                        )

                        // Storage에서 기존 파일 삭제
                        const response = await fetch(
                            `${PROXY_BASE_URL}/api/images`,
                            {
                                method: "DELETE",
                                headers: {
                                    "Content-Type": "application/json",
                                    Authorization: `Bearer ${getAuthToken()}`,
                                },
                                body: JSON.stringify({
                                    imageId: null, // 포토섹션은 images 테이블에 저장되지 않음
                                    fileName: oldFileName,
                                    storageOnly: true, // 스토리지에서만 삭제
                                }),
                            }
                        )
                        if (!response.ok) {
                            const t = await response.text()
                            console.warn("기존 포토섹션 이미지 삭제 실패:", t)
                        }
                    }
                } catch (deleteError) {
                    console.warn(
                        "기존 포토섹션 이미지 삭제 중 오류:",
                        deleteError
                    )
                }
            }

            // 1. 파일 크기 검증
            validateImageFileSize(file)

            // 2. 이미지 압축 (점진적)
            const compressionResult = await progressiveCompress(
                file,
                1024,
                (p) => setCompressProgress(p)
            )
            const finalFile: File =
                compressionResult && compressionResult.compressedFile
                    ? compressionResult.compressedFile
                    : file
            setCompressProgress(null)

            // 3. presigned URL 요청 (원본 파일명으로 확장자 보존)
            const { signedUrl, path } = await getPresignedUrl(
                `photosection_${file.name}`,
                currentPageId
            )

            // 4. 파일을 직접 Storage에 업로드 (압축된 파일 사용)
            await uploadToPresignedUrl(signedUrl, finalFile)

            // 5. 경로 저장 및 서버 저장
            const imagePath = path

            // 로컬 상태 선반영
            setPageSettings((prev: any) => ({
                ...prev,
                photo_section_image_path: imagePath,
                photo_section_image_url: "",
            }))
            // CDN 캐시 무효화를 위한 버전 업데이트
            setPhotoSectionImageVersion((v) => v + 1)

            // 즉시 서버 저장 (override)
            await savePageSettings({
                photo_section_image_path: imagePath,
                photo_section_image_url: "",
            })

            setSuccess("메인 사진이 업로드되었습니다.")
        } catch (error: unknown) {
            console.error("Photo section image upload error:", error)
            const message =
                error instanceof Error ? error.message : String(error)
            setError("메인 사진 업로드 중 오류가 발생했습니다: " + message)
        } finally {
            setSettingsLoading(false)
        }
    }

    useEffect(() => {
        if (currentPageId) loadExistingImages()
    }, [currentPageId])

    // 이미지 업로드 (presigned URL 방식 + 압축)
    const handleFileSelect = async (
        event: React.ChangeEvent<HTMLInputElement>
    ) => {
        if (!currentPageId) return alert("페이지 ID를 설정하세요")

        const files = Array.from(event.target.files ?? [])
        setUploading(true)
        setProgress(0)
        setUploadSuccess(0)

        try {
            let completed = 0
            const totalFiles = files.length

            // 각 파일 개별 처리 (압축 + 업로드)
            for (let i = 0; i < totalFiles; i++) {
                const file = files[i]

                try {
                    // 1. 파일 유효성 검사
                    validateImageFileSize(file)

                    // 2. 이미지 압축 (1024KB 이상인 경우)
                    let processedFile = file
                    if (file.size / 1024 > maxSizeKB) {
                        console.log(
                            `압축 시작: ${file.name} (${(file.size / 1024).toFixed(2)}KB)`
                        )

                        const compressionResult = await progressiveCompress(
                            file,
                            maxSizeKB,
                            (fileProgress) => {
                                // 전체 진행률 계산 (압축 50% + 업로드 50%)
                                const totalProgress =
                                    (i / totalFiles) * 100 +
                                    (fileProgress * 0.5) / totalFiles
                                setProgress(Math.round(totalProgress))
                            }
                        )

                        processedFile = compressionResult.compressedFile
                        console.log(
                            `압축 완료: ${file.name} (${(processedFile.size / 1024).toFixed(2)}KB)`
                        )
                    }

                    // 3. presigned URL 요청
                    const { signedUrl, path, originalName } =
                        await getPresignedUrl(processedFile.name, currentPageId)

                    // 4. 파일을 직접 Storage에 업로드
                    await uploadToPresignedUrl(signedUrl, processedFile)

                    // 5. DB에 메타데이터 저장
                    const saved = await saveImageMeta(
                        currentPageId,
                        originalName,
                        existingImages.length + i + 1,
                        path,
                        processedFile.size
                    )

                    completed++
                    setProgress(Math.round((completed / totalFiles) * 100))

                    // 낙관적 반영: 방금 업로드한 이미지 그리드에 즉시 추가 (캐시 무효화 파라미터 포함)
                    const newImg: ImageInfo = {
                        id: saved.id || saved?.id || `${Date.now()}_${i}`,
                        filename: saved.filename || path,
                        public_url: ((): string => {
                            const base =
                                saved.public_url ||
                                (saved.storage_path ? saved.storage_path : "")
                            const url = base || ""
                            const sep = url.includes("?") ? "&" : "?"
                            return url ? `${url}${sep}v=${Date.now()}` : url
                        })(),
                        original_name: saved.original_name || originalName,
                    }
                    setExistingImages((prev) => [...prev, newImg])
                    setImagesVersion((v) => v + 1)
                } catch (error) {
                    console.error(`파일 ${file.name} 처리 실패:`, error)
                    completed++
                    setProgress(Math.round((completed / totalFiles) * 100))
                    // 개별 파일 실패시에도 다른 파일은 계속 처리
                }
            }

            setUploading(false)
            setProgress(100)
            setUploadSuccess(files.length)
            // 최종 동기화 (짧은 지연 후 최신 정렬/데이터 일치)
            setTimeout(() => {
                loadExistingImages()
            }, 200)
            loadAllPages()
            setTimeout(() => setUploadSuccess(0), 3000)
        } catch (error: unknown) {
            console.error("Upload error:", error)
            const message =
                error instanceof Error ? error.message : String(error)
            alert("업로드 중 오류가 발생했습니다: " + message)
            setUploading(false)
            setProgress(0)
        }
    }

    // 연락처 관리
    const handleAddContact = () => {
        setSelectedContact({ ...initialContactData, page_id: currentPageId })
        setIsEditingContact(true)
    }

    const handleEditContact = (contact: any) => {
        setSelectedContact(contact)
        setIsEditingContact(true)
    }

    const handleDeleteContact = async (id: string) => {
        if (!confirm("정말로 이 연락처를 삭제하시겠습니까?")) return

        setLoading(true)

        // 낙관적 업데이트 - 즉시 UI에서 제거
        const contactToDelete = contactList.find((contact) => contact.id === id)
        setContactList((prev) => prev.filter((contact) => contact.id !== id))

        try {
            const result = await deleteContact(id)

            if (result.success) {
                setSuccess("연락처가 성공적으로 삭제되었습니다!")
                // 3초 후 성공 메시지 자동 제거
                setTimeout(() => setSuccess(null), 3000)
            } else {
                // 실패 시 원래 상태로 복원
                if (contactToDelete) {
                    setContactList((prev) => [...prev, contactToDelete])
                }
                setError("삭제에 실패했습니다: " + result.error)
            }
        } catch (err) {
            // 실패 시 원래 상태로 복원
            if (contactToDelete) {
                setContactList((prev) => [...prev, contactToDelete])
            }
            setError("삭제에 실패했습니다.")
        } finally {
            setLoading(false)
        }
    }

    const handleSaveContact = async () => {
        if (!selectedContact) return

        if (!selectedContact.page_id.trim()) {
            setError("페이지 ID는 필수입니다.")
            return
        }
        if (selectedContact.page_id !== currentPageId) {
            setError("현재 선택된 페이지와 연락처의 페이지 ID가 다릅니다.")
            return
        }

        setLoading(true)

        // 낙관적 업데이트 - 즉시 UI 반영
        const isUpdate = !!selectedContact.id
        const updatedContact = { ...selectedContact }

        if (isUpdate) {
            // 수정: 기존 연락처를 업데이트된 정보로 교체
            setContactList((prev) =>
                prev.map((contact) =>
                    contact.id === selectedContact.id ? updatedContact : contact
                )
            )
        } else {
            // 추가: 새 연락처를 목록에 추가
            const newContact = {
                ...updatedContact,
                id: `temp_${Date.now()}`, // 임시 ID
            }
            setContactList((prev) => [...prev, newContact])
        }

        try {
            const result = await saveContact(selectedContact)

            if (result.success) {
                // 성공 시 실제 서버 데이터로 교체
                if (isUpdate) {
                    setContactList((prev) =>
                        prev.map((contact) =>
                            contact.id === selectedContact.id
                                ? { ...contact, ...result.data } // 서버에서 반환된 실제 데이터
                                : contact
                        )
                    )
                } else {
                    // 새로 추가된 경우 임시 ID를 실제 ID로 교체
                    setContactList((prev) =>
                        prev.map((contact) =>
                            contact.id === `temp_${Date.now() - 1000}` // 임시 ID
                                ? { ...contact, id: result.data.id } // 실제 ID
                                : contact
                        )
                    )
                }

                setSuccess(
                    isUpdate
                        ? "연락처가 성공적으로 수정되었습니다!"
                        : "연락처가 성공적으로 추가되었습니다!"
                )
                setIsEditingContact(false)
                setSelectedContact(null)

                // 3초 후 성공 메시지 자동 제거
                setTimeout(() => setSuccess(null), 3000)
            } else {
                // 실패 시 원래 상태로 복원
                if (isUpdate) {
                    setContactList((prev) =>
                        prev.map((contact) =>
                            contact.id === selectedContact.id
                                ? contact // 원래 상태 유지
                                : contact
                        )
                    )
                } else {
                    // 새로 추가된 경우 제거
                    setContactList((prev) =>
                        prev.filter(
                            (contact) =>
                                contact.id !== `temp_${Date.now() - 1000}`
                        )
                    )
                }

                setError(`저장에 실패했습니다: ${result.error}`)
            }
        } catch (err) {
            // 실패 시 원래 상태로 복원
            if (isUpdate) {
                setContactList((prev) =>
                    prev.map((contact) =>
                        contact.id === selectedContact.id
                            ? contact // 원래 상태 유지
                            : contact
                    )
                )
            } else {
                // 새로 추가된 경우 제거
                setContactList((prev) =>
                    prev.filter(
                        (contact) => contact.id !== `temp_${Date.now() - 1000}`
                    )
                )
            }

            setError(
                `저장에 실패했습니다: ${err instanceof Error ? err.message : "알 수 없는 오류"}`
            )
        } finally {
            setLoading(false)
        }
    }

    const handleContactInputChange = (field: string, value: string) => {
        if (selectedContact) {
            // page_id는 직접 수정 불가
            if (field === "page_id") return
            setSelectedContact({ ...selectedContact, [field]: value })
        }
    }

    // 연락처 인라인 저장 (단일 레코드)
    const handleSaveContactInline = async () => {
        const base = selectedContact ?? {
            ...initialContactData,
            page_id: currentPageId,
        }

        const payload = { ...base, page_id: currentPageId }

        try {
            setLoading(true)
            const result = await saveContact(payload)
            if (result.success) {
                // 페이지당 단일 항목으로 동기화
                const saved = result.data
                setSelectedContact(saved)
                setContactList((prev) => {
                    const others = prev.filter(
                        (c) => c.page_id !== currentPageId
                    )
                    return [...others, saved]
                })
                setSuccess("연락처가 저장되었습니다.")
                setTimeout(() => setSuccess(null), 3000)
            } else {
                setError(result.error || "저장에 실패했습니다")
            }
        } catch (err) {
            setError(
                err instanceof Error
                    ? err.message
                    : "알 수 없는 오류가 발생했습니다"
            )
        } finally {
            setLoading(false)
        }
    }

    // 연락처 준비 (아코디언에서는 항상 로드)
    useEffect(() => {
        const existing = contactList.find((c) => c.page_id === currentPageId)
        setSelectedContact(
            existing
                ? { ...existing }
                : { ...initialContactData, page_id: currentPageId }
        )
        setIsEditingContact(false)
    }, [contactList, currentPageId])

    // pageId 변경 시 연락처 목록 및 설정 자동 갱신
    useEffect(() => {
        if (isAuthenticated && currentPageId) {
            loadContactList()
            loadPageSettings()
            // 페이지 변경 시 선택된 이미지 초기화
            setSelectedImages(new Set())
        }
    }, [currentPageId])

    // 알림 메시지 자동 제거
    useEffect(() => {
        if (error || success) {
            const timer = setTimeout(() => {
                setError(null)
                setSuccess(null)
            }, 5000)
            return () => clearTimeout(timer)
        }
    }, [error, success])

    // 로그인 화면
    if (!isAuthenticated) {
        return (
            <div
                style={{
                    ...style,
                    width: "100%",
                    maxWidth: "430px",
                    minWidth: "375px",
                    height: "100vh",
                    backgroundColor: "#f5f5f5",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    padding: "15px",
                    boxSizing: "border-box",
                }}
            >
                <div
                    style={{
                        backgroundColor: "white",
                        padding: "32px 24px",
                        width: "100%",
                        maxWidth: "320px",
                        boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                    }}
                >
                    <div style={{ textAlign: "center", marginBottom: "32px" }}>
                        <h2
                            style={{
                                margin: 0,
                                fontSize: "20px",
                                color: "#000000",
                                fontWeight: "600",
                                marginBottom: "8px",
                            }}
                        >
                            웨딩 통합 관리자
                        </h2>
                        <p
                            style={{
                                margin: 0,
                                fontSize: "14px",
                                color: "#6b7280",
                            }}
                        >
                            이미지 업로드 및 연락처 관리
                        </p>
                    </div>

                    <form onSubmit={handleLogin}>
                        <div style={{ marginBottom: "20px" }}>
                            <label
                                style={{
                                    display: "block",
                                    marginBottom: "8px",
                                    fontSize: "14px",
                                    fontWeight: "500",
                                    color: "#000000",
                                }}
                            >
                                아이디
                            </label>
                            <input
                                type="text"
                                value={loginForm.username}
                                onChange={(
                                    e: React.ChangeEvent<HTMLInputElement>
                                ) =>
                                    setLoginForm((prev) => ({
                                        ...prev,
                                        username: e.target.value,
                                    }))
                                }
                                style={{
                                    width: "100%",
                                    padding: "12px 16px",
                                    border: "1px solid #e0e0e0",
                                    borderRadius: "0",
                                    boxSizing: "border-box",
                                    fontSize: "16px",
                                    backgroundColor: "white",
                                    color: "#000000",
                                }}
                                required
                            />
                        </div>

                        <div style={{ marginBottom: "24px" }}>
                            <label
                                style={{
                                    display: "block",
                                    marginBottom: "8px",
                                    fontSize: "14px",
                                    fontWeight: "500",
                                    color: "#000000",
                                }}
                            >
                                비밀번호
                            </label>
                            <input
                                type="password"
                                value={loginForm.password}
                                onChange={(e) =>
                                    setLoginForm((prev) => ({
                                        ...prev,
                                        password: e.target.value,
                                    }))
                                }
                                style={{
                                    width: "100%",
                                    padding: "12px 16px",
                                    border: "1px solid #e0e0e0",
                                    borderRadius: "0",
                                    boxSizing: "border-box",
                                    fontSize: "16px",
                                    backgroundColor: "white",
                                    color: "#000000",
                                }}
                                required
                            />
                        </div>

                        {loginError && (
                            <div
                                style={{
                                    padding: "12px 16px",
                                    backgroundColor: "#f5f5f5",
                                    color: "#666666",
                                    fontSize: "14px",
                                    marginBottom: "20px",
                                    textAlign: "center",
                                }}
                            >
                                {loginError}
                            </div>
                        )}

                        <button
                            type="submit"
                            disabled={isLoggingIn}
                            style={{
                                width: "100%",
                                padding: "14px 16px",
                                backgroundColor: "#000000",
                                color: "white",
                                border: "none",
                                borderRadius: "0",
                                fontSize: "16px",
                                fontWeight: "500",
                                cursor: "pointer",
                            }}
                        >
                            {isLoggingIn ? "로그인 중..." : "로그인"}
                        </button>
                    </form>
                </div>
            </div>
        )
    }

    // 관리자 화면
    return (
        <div
            style={{
                ...style,
                width: "100%",
                maxWidth: "430px",
                minWidth: "375px",
                height: "100vh",
                display: "flex",
                flexDirection: "column",
                backgroundColor: "#f5f5f5",
                overflow: "auto",
            }}
        >
            {/* 성공/에러 메시지 표시 */}
            <AnimatePresence>
                {success && (
                    <motion.div
                        initial={{ opacity: 0, y: -20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        style={{
                            padding: "12px 16px",
                            backgroundColor: "#f5f5f5",
                            color: "#000000",
                            fontSize: "14px",
                            fontWeight: "500",
                            textAlign: "center",
                            borderBottom: "1px solid #e0e0e0",
                        }}
                    >
                        {success}
                    </motion.div>
                )}
                {error && (
                    <motion.div
                        initial={{ opacity: 0, y: -20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        style={{
                            padding: "12px 16px",
                            backgroundColor: "#f5f5f5",
                            color: "#666666",
                            fontSize: "14px",
                            fontWeight: "500",
                            textAlign: "center",
                            borderBottom: "1px solid #e0e0e0",
                        }}
                    >
                        {error}
                    </motion.div>
                )}
            </AnimatePresence>

            {/* 헤더 */}
            <div
                style={{
                    width: "100%",
                    padding: "16px",
                    backgroundColor: "white",
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    borderBottom: "0.5px solid #E5E6E8",
                }}
            >
                <button
                    style={{
                        padding: "4px 7px",
                        backgroundColor: "black",
                        color: "white",
                        border: "none",
                        fontSize: "10px",
                        fontFamily: "Pretendard",
                        fontWeight: "400",
                        cursor: "pointer",
                    }}
                >
                    미리보기
                </button>

                <span
                    style={{
                        color: "black",
                        fontSize: "12px",
                        fontFamily: "Pretendard",
                        fontWeight: "600",
                    }}
                >
                    {pageSettings.groom_name_en || "신랑"} ♥{" "}
                    {pageSettings.bride_name_en || "신부"}
                </span>
                <button
                    onClick={handleLogout}
                    style={{
                        padding: "4px 7px",
                        backgroundColor: "white",
                        color: "#7F7F7F",
                        border: "0.5px solid #E5E6E8",
                        fontSize: "10px",
                        fontFamily: "Pretendard",
                        fontWeight: "400",
                        cursor: "pointer",
                    }}
                >
                    로그아웃
                </button>
            </div>

            {/* 아코디언 메뉴 */}
            <div
                style={{
                    backgroundColor: "#E6E6E6",
                    flex: 1,
                    overflowY: "auto",
                    padding: "16px",
                }}
            >
                {/* 성함 섹션 */}
                <div style={{ flexDirection: "column", display: "flex" }}>
                    <button
                        onClick={() => toggleSection("name")}
                        style={{
                            width: "100%",
                            padding: "14px",
                            backgroundColor: "white",
                            border: "none",
                            borderBottom: openSections.name
                                ? "0.5px solid #E5E6E8"
                                : "0.5px solid #FAFAFA",
                            display: "flex",
                            justifyContent: "space-between",
                            alignItems: "center",
                            cursor: "pointer",
                            fontSize: "14px",
                            fontWeight: "400",
                            color: "#757575",
                            fontFamily: "Pretendard",
                        }}
                    >
                        <span>성함</span>
                        <div
                            style={{
                                width: "32px",
                                height: "32px",
                                display: "flex",
                                justifyContent: "center",
                                alignItems: "center",
                                padding: "13px 9px",
                            }}
                        >
                            <div
                                style={{
                                    width: "12px",
                                    height: "5.5px",
                                    border: "1.5px solid #757575",
                                    borderLeft: "none",
                                    borderRight: "none",
                                    borderBottom: "none",
                                    transform: openSections.name
                                        ? "rotate(180deg)"
                                        : "rotate(0deg)",
                                    transition: "transform 0.2s ease",
                                }}
                            />
                        </div>
                    </button>
                    {openSections.name && (
                        <div
                            style={{
                                padding: "32px 16px",
                                backgroundColor: "white",
                                display: "flex",
                                justifyContent: "flex-start",
                                alignItems: "center",
                                gap: "10px",
                            }}
                        >
                            <div
                                style={{
                                    width: "100%",
                                    flexDirection: "column",
                                    display: "flex",
                                    gap: "12px",
                                }}
                            >
                                {/* NameSection 미리보기 */}
                                <div
                                    style={{
                                        border: "1px solid #e5e7eb",
                                        padding: 12,
                                        marginBottom: 0,
                                        background: "#fafafa",
                                    }}
                                >
                                    <InlineNameSection
                                        {...buildNameSectionProps()}
                                    />
                                </div>
                                <div
                                    style={{
                                        fontSize: 12,
                                        color: "#6b7280",
                                        marginBottom: 8,
                                        textAlign: "center",
                                    }}
                                >
                                    미리보기
                                </div>

                                {/* 입력 필드들 */}
                                <div
                                    style={{
                                        flexDirection: "column",
                                        display: "flex",
                                        gap: "12px",
                                    }}
                                >
                                    <div
                                        style={{
                                            flexDirection: "column",
                                            display: "flex",
                                            gap: "8px",
                                        }}
                                    >
                                        <span
                                            style={{
                                                color: "black",
                                                fontSize: "12px",
                                                fontFamily: "Pretendard",
                                                fontWeight: "600",
                                            }}
                                        >
                                            신랑 영문 성함
                                        </span>
                                        <div
                                            style={{
                                                width: "100%",
                                                height: "40px",
                                                padding: "12px",
                                                backgroundColor: "white",
                                                border: "0.5px solid #E5E6E8",
                                                display: "flex",
                                                alignItems: "center",
                                                gap: "10px",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    pageSettings.groom_name_en ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    setPageSettings({
                                                        ...pageSettings,
                                                        groom_name_en:
                                                            e.target.value,
                                                    })
                                                }
                                                placeholder="MIN JUN"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: "12px",
                                                    fontFamily: "Pretendard",
                                                    fontWeight: "400",
                                                    color: pageSettings.groom_name_en
                                                        ? "black"
                                                        : "#ADADAD",
                                                    backgroundColor:
                                                        "transparent",
                                                }}
                                            />
                                        </div>
                                    </div>

                                    <div
                                        style={{
                                            flexDirection: "column",
                                            display: "flex",
                                            gap: "8px",
                                        }}
                                    >
                                        <span
                                            style={{
                                                color: "black",
                                                fontSize: "12px",
                                                fontFamily: "Pretendard",
                                                fontWeight: "600",
                                            }}
                                        >
                                            신부 영문 성함
                                        </span>
                                        <div
                                            style={{
                                                width: "100%",
                                                height: "40px",
                                                padding: "12px",
                                                backgroundColor: "white",
                                                border: "0.5px solid #E5E6E8",
                                                display: "flex",
                                                alignItems: "center",
                                                gap: "10px",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    pageSettings.bride_name_en ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    setPageSettings({
                                                        ...pageSettings,
                                                        bride_name_en:
                                                            e.target.value,
                                                    })
                                                }
                                                placeholder="SEO YUN"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: "12px",
                                                    fontFamily: "Pretendard",
                                                    fontWeight: "400",
                                                    color: pageSettings.bride_name_en
                                                        ? "black"
                                                        : "#ADADAD",
                                                    backgroundColor:
                                                        "transparent",
                                                }}
                                            />
                                        </div>
                                    </div>

                                    {/* 저장 버튼 */}
                                    <button
                                        onClick={savePageSettings}
                                        disabled={settingsLoading}
                                        style={{
                                            width: "100%",
                                            height: "40px",
                                            padding: "12px",
                                            backgroundColor: settingsLoading
                                                ? "#f5f5f5"
                                                : "black",
                                            color: settingsLoading
                                                ? "#999"
                                                : "white",
                                            border: "none",
                                            fontSize: "12px",
                                            fontFamily: "Pretendard",
                                            fontWeight: "400",
                                            cursor: settingsLoading
                                                ? "not-allowed"
                                                : "pointer",
                                            marginTop: "12px",
                                        }}
                                    >
                                        {settingsLoading
                                            ? "저장 중..."
                                            : "저장"}
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}
                </div>

                {/* 8px 여백 */}
                <div style={{ width: "100%", height: "8px" }} />

                {/* 메인 사진 */}
                <button
                    onClick={() => toggleSection("photo")}
                    style={{
                        width: "100%",
                        padding: "14px",
                        backgroundColor: "white",
                        border: "none",
                        borderBottom: openSections.photo
                            ? "0.5px solid #E5E6E8"
                            : "0.5px solid #FAFAFA",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        cursor: "pointer",
                        fontSize: "14px",
                        fontWeight: "400",
                        color: "#757575",
                        fontFamily: "Pretendard",
                        marginBottom: openSections.photo ? 0 : "8px",
                    }}
                >
                    <span>메인 사진</span>
                    <div
                        style={{
                            width: "32px",
                            height: "32px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            padding: "13px 9px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "5.5px",
                                border: "1.5px solid #757575",
                                borderLeft: "none",
                                borderRight: "none",
                                borderBottom: "none",
                                transform: openSections.photo
                                    ? "rotate(180deg)"
                                    : "rotate(0deg)",
                                transition: "transform 0.2s ease",
                            }}
                        />
                    </div>
                </button>
                {openSections.photo && (
                    <div
                        style={{
                            padding: "32px 16px",
                            backgroundColor: "white",
                            display: "flex",
                            justifyContent: "flex-start",
                            alignItems: "flex-start",
                            gap: "10px",
                        }}
                    >
                        <div
                            style={{
                                width: "100%",
                                display: "flex",
                                flexDirection: "column",
                                gap: "12px",
                            }}
                        >
                            {/* 미리보기 박스 */}
                            <div
                                style={{
                                    width: "100%",
                                    background: "#FAFAFA",
                                    border: "0.5px solid #E5E6E8",
                                    outlineOffset: "-0.25px",
                                }}
                            >
                                <div
                                    style={{
                                        width: "100%",
                                        height: 468,
                                        overflow: "hidden",
                                    }}
                                >
                                    <InlinePhotoSection
                                        {...buildPhotoSectionProps()}
                                        style={{ height: "100%" }}
                                    />
                                </div>
                            </div>
                            <div
                                style={{
                                    fontSize: 12,
                                    color: "#7F7F7F",
                                    textAlign: "center",
                                }}
                            >
                                미리보기
                            </div>

                            {/* 메인 사진 업로드 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: "8px",
                                }}
                            >
                                <span
                                    style={{
                                        color: "black",
                                        fontSize: "12px",
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    메인 사진
                                </span>
                                <div
                                    style={{
                                        display: "flex",
                                        gap: 8,
                                        width: "100%",
                                    }}
                                >
                                    <button
                                        onClick={() =>
                                            document
                                                .getElementById(
                                                    "photoSectionFileInput_acdn"
                                                )
                                                ?.click()
                                        }
                                        style={{
                                            width: "100%",
                                            height: 40,
                                            padding: 12,
                                            background: "#818181",
                                            color: "white",
                                            border: "none",
                                            display: "inline-flex",
                                            justifyContent: "center",
                                            alignItems: "center",
                                            gap: 10,
                                            cursor: "pointer",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            fontWeight: 400,
                                        }}
                                    >
                                        업로드
                                    </button>
                                    <input
                                        id="photoSectionFileInput_acdn"
                                        type="file"
                                        accept="image/*"
                                        onChange={handlePhotoSectionImageUpload}
                                        style={{ display: "none" }}
                                    />
                                </div>
                            </div>

                            {/* 예식 일시 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <span
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    예식 일시
                                </span>
                                {/* 날짜 입력 */}
                                <div
                                    style={{
                                        width: "100%",
                                        height: 40,
                                        padding: 12,
                                        background: "white",
                                        border: "0.5px solid #E5E6E8",
                                        display: "inline-flex",
                                        alignItems: "center",
                                        gap: 10,
                                    }}
                                >
                                    <input
                                        type="date"
                                        value={pageSettings.wedding_date}
                                        onChange={(e) =>
                                            setPageSettings({
                                                ...pageSettings,
                                                wedding_date: e.target.value,
                                            })
                                        }
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            background: "transparent",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            color: pageSettings.wedding_date
                                                ? "black"
                                                : "#ADADAD",
                                        }}
                                        placeholder="연도. 월. 일."
                                    />
                                </div>
                                {/* 언어 토글 (영문/국문) */}
                                <div
                                    style={{
                                        width: "100%",
                                        display: "inline-flex",
                                        gap: 8,
                                    }}
                                >
                                    {(["en", "kr"] as const).map((loc) => (
                                        <div
                                            key={loc}
                                            onClick={() =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    photo_section_locale: loc,
                                                })
                                            }
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background:
                                                    pageSettings.photo_section_locale ===
                                                    loc
                                                        ? "#ECECEC"
                                                        : "white",
                                                border: "0.5px solid #E5E6E8",
                                                display: "flex",
                                                justifyContent: "center",
                                                alignItems: "center",
                                                cursor: "pointer",
                                                userSelect: "none",
                                            }}
                                        >
                                            <span style={{ fontSize: 12 }}>
                                                {loc === "en" ? "영문" : "국문"}
                                            </span>
                                        </div>
                                    ))}
                                </div>
                                {/* AM/PM + 시간/분 선택 */}
                                <div
                                    style={{
                                        width: "100%",
                                        display: "inline-flex",
                                        gap: 8,
                                        alignItems: "center",
                                    }}
                                >
                                    {/* AM/PM */}
                                    <div
                                        style={{
                                            width: 85,
                                            display: "flex",
                                            gap: 6,
                                        }}
                                    >
                                        {(["AM", "PM"] as const).map((ap) => {
                                            const h = parseInt(
                                                pageSettings.wedding_hour ||
                                                    "0",
                                                10
                                            )
                                            const isPm = h >= 12
                                            const selected =
                                                ap === "PM" ? isPm : !isPm
                                            return (
                                                <div
                                                    key={ap}
                                                    onClick={() => {
                                                        const current =
                                                            parseInt(
                                                                pageSettings.wedding_hour ||
                                                                    "0",
                                                                10
                                                            )
                                                        let next = current
                                                        if (
                                                            ap === "AM" &&
                                                            current >= 12
                                                        )
                                                            next = current - 12
                                                        if (
                                                            ap === "PM" &&
                                                            current < 12
                                                        )
                                                            next = current + 12
                                                        setPageSettings({
                                                            ...pageSettings,
                                                            wedding_hour:
                                                                String(
                                                                    next
                                                                ).padStart(
                                                                    2,
                                                                    "0"
                                                                ),
                                                        })
                                                    }}
                                                    style={{
                                                        flex: 1,
                                                        height: 40,
                                                        padding: 12,
                                                        background: selected
                                                            ? "#ECECEC"
                                                            : "white",
                                                        border: "0.5px solid #E5E6E8",
                                                        display: "flex",
                                                        justifyContent:
                                                            "center",
                                                        alignItems: "center",
                                                        cursor: "pointer",
                                                        userSelect: "none",
                                                    }}
                                                >
                                                    <span
                                                        style={{ fontSize: 12 }}
                                                    >
                                                        {ap}
                                                    </span>
                                                </div>
                                            )
                                        })}
                                    </div>
                                    {/* 시간/분 */}
                                    <div
                                        style={{
                                            flex: 1,
                                            display: "flex",
                                            gap: 6,
                                            alignItems: "center",
                                        }}
                                    >
                                        <div
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                display: "flex",
                                                justifyContent: "space-between",
                                                alignItems: "center",
                                            }}
                                        >
                                            <select
                                                value={(() => {
                                                    const h = parseInt(
                                                        pageSettings.wedding_hour ||
                                                            "0",
                                                        10
                                                    )
                                                    const base = h % 12 || 12
                                                    return String(
                                                        base
                                                    ).padStart(2, "0")
                                                })()}
                                                onChange={(e) => {
                                                    const h12 =
                                                        parseInt(
                                                            e.target.value,
                                                            10
                                                        ) % 12 || 12
                                                    const current = parseInt(
                                                        pageSettings.wedding_hour ||
                                                            "0",
                                                        10
                                                    )
                                                    const isPm = current >= 12
                                                    const next =
                                                        (h12 % 12) +
                                                        (isPm ? 12 : 0)
                                                    setPageSettings({
                                                        ...pageSettings,
                                                        wedding_hour: String(
                                                            next
                                                        ).padStart(2, "0"),
                                                    })
                                                }}
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    background: "transparent",
                                                    fontSize: 12,
                                                }}
                                            >
                                                {Array.from(
                                                    { length: 12 },
                                                    (_, i) => i + 1
                                                ).map((n) => (
                                                    <option
                                                        key={n}
                                                        value={String(
                                                            n
                                                        ).padStart(2, "0")}
                                                    >
                                                        {String(n).padStart(
                                                            2,
                                                            "0"
                                                        )}
                                                    </option>
                                                ))}
                                            </select>
                                            <div
                                                style={{
                                                    width: 7.5,
                                                    height: 3.44,
                                                    transform: "rotate(180deg)",
                                                    outline:
                                                        "0.94px #757575 solid",
                                                    outlineOffset: "-0.47px",
                                                }}
                                            />
                                        </div>
                                        <span
                                            style={{
                                                fontSize: 12,
                                                color: "black",
                                            }}
                                        >
                                            :
                                        </span>
                                        <div
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                display: "flex",
                                                justifyContent: "space-between",
                                                alignItems: "center",
                                            }}
                                        >
                                            <select
                                                value={
                                                    pageSettings.wedding_minute
                                                }
                                                onChange={(e) =>
                                                    setPageSettings({
                                                        ...pageSettings,
                                                        wedding_minute:
                                                            e.target.value,
                                                    })
                                                }
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    background: "transparent",
                                                    fontSize: 12,
                                                }}
                                            >
                                                {[
                                                    "00",
                                                    "05",
                                                    "10",
                                                    "15",
                                                    "20",
                                                    "25",
                                                    "30",
                                                    "35",
                                                    "40",
                                                    "45",
                                                    "50",
                                                    "55",
                                                ].map((m) => (
                                                    <option key={m} value={m}>
                                                        {m}
                                                    </option>
                                                ))}
                                            </select>
                                            <div
                                                style={{
                                                    width: 7.5,
                                                    height: 3.44,
                                                    transform: "rotate(180deg)",
                                                    outline:
                                                        "0.94px #757575 solid",
                                                    outlineOffset: "-0.47px",
                                                }}
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* 일시 표시 위치 / 텍스트 색상 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <span
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    일시 표시 위치
                                </span>
                                {/* 상단/하단 */}
                                <div
                                    style={{
                                        width: "100%",
                                        display: "inline-flex",
                                        gap: 8,
                                    }}
                                >
                                    {(["top", "bottom"] as const).map((pos) => (
                                        <div
                                            key={pos}
                                            onClick={() =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    photo_section_overlay_position:
                                                        pos,
                                                })
                                            }
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background:
                                                    pageSettings.photo_section_overlay_position ===
                                                    pos
                                                        ? "#ECECEC"
                                                        : "white",
                                                border: "0.5px solid #E5E6E8",
                                                display: "flex",
                                                justifyContent: "center",
                                                alignItems: "center",
                                                cursor: "pointer",
                                                userSelect: "none",
                                            }}
                                        >
                                            <span style={{ fontSize: 12 }}>
                                                {pos === "top"
                                                    ? "상단"
                                                    : "하단"}
                                            </span>
                                        </div>
                                    ))}
                                </div>
                                {/* 텍스트 색상 */}
                                <div
                                    style={{
                                        width: "100%",
                                        display: "inline-flex",
                                        gap: 8,
                                    }}
                                >
                                    {(["#ffffff", "#000000"] as const).map(
                                        (color) => (
                                            <div
                                                key={color}
                                                onClick={() =>
                                                    setPageSettings({
                                                        ...pageSettings,
                                                        photo_section_overlay_color:
                                                            color,
                                                    })
                                                }
                                                style={{
                                                    flex: 1,
                                                    height: 40,
                                                    padding: 12,
                                                    background:
                                                        pageSettings.photo_section_overlay_color ===
                                                        color
                                                            ? "#ECECEC"
                                                            : "white",
                                                    border: "0.5px solid #E5E6E8",
                                                    display: "flex",
                                                    justifyContent: "center",
                                                    alignItems: "center",
                                                    cursor: "pointer",
                                                    userSelect: "none",
                                                }}
                                            >
                                                <span style={{ fontSize: 12 }}>
                                                    {color === "#ffffff"
                                                        ? "흰색"
                                                        : "검정색"}
                                                </span>
                                            </div>
                                        )
                                    )}
                                </div>
                            </div>

                            {/* 예식장 이름 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <span
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    예식장 이름
                                </span>
                                <div
                                    style={{
                                        width: "100%",
                                        height: 40,
                                        padding: 12,
                                        background: "white",
                                        border: "0.5px solid #E5E6E8",
                                        display: "inline-flex",
                                        alignItems: "center",
                                        gap: 10,
                                    }}
                                >
                                    <input
                                        type="text"
                                        value={pageSettings.venue_name}
                                        onChange={(e) =>
                                            setPageSettings({
                                                ...pageSettings,
                                                venue_name: e.target.value,
                                            })
                                        }
                                        placeholder="ROARC HOTEL"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            background: "transparent",
                                            fontSize: 12,
                                            color: pageSettings.venue_name
                                                ? "black"
                                                : "#ADADAD",
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 저장 버튼 */}
                            <button
                                onClick={savePageSettings}
                                disabled={settingsLoading}
                                style={{
                                    width: "100%",
                                    height: 40,
                                    padding: 12,
                                    backgroundColor: settingsLoading
                                        ? "#f5f5f5"
                                        : "black",
                                    color: settingsLoading ? "#999" : "white",
                                    border: "none",
                                    fontSize: 12,
                                    fontFamily: "Pretendard",
                                    fontWeight: 400,
                                    cursor: settingsLoading
                                        ? "not-allowed"
                                        : "pointer",
                                    marginTop: 12,
                                }}
                            >
                                {settingsLoading ? "저장 중..." : "저장"}
                            </button>
                        </div>
                    </div>
                )}
                {/* 8px 여백 (펼친 섹션 아래 구분용) */}
                {openSections.photo && (
                    <div style={{ width: "100%", height: "8px" }} />
                )}

                {/* 초대글 */}
                <button
                    onClick={() => toggleSection("invite")}
                    style={{
                        width: "100%",
                        padding: "14px",
                        backgroundColor: "white",
                        border: "none",
                        borderBottom: openSections.invite
                            ? "0.5px solid #E5E6E8"
                            : "0.5px solid #FAFAFA",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        cursor: "pointer",
                        fontSize: "14px",
                        fontWeight: "400",
                        color: "#757575",
                        fontFamily: "Pretendard",
                        marginBottom: openSections.invite ? 0 : "8px",
                    }}
                >
                    <span>초대글</span>
                    <div
                        style={{
                            width: "32px",
                            height: "32px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            padding: "13px 9px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "5.5px",
                                border: "1.5px solid #757575",
                                borderLeft: "none",
                                borderRight: "none",
                                borderBottom: "none",
                                transform: openSections.invite
                                    ? "rotate(180deg)"
                                    : "rotate(0deg)",
                                transition: "transform 0.2s ease",
                            }}
                        />
                    </div>
                </button>
                {openSections.invite && (
                    <div
                        style={{
                            padding: "32px 16px",
                            backgroundColor: "white",
                            display: "flex",
                            justifyContent: "flex-start",
                            alignItems: "flex-start",
                            gap: "10px",
                        }}
                    >
                        <div
                            style={{
                                width: "100%",
                                display: "flex",
                                flexDirection: "column",
                                gap: 12,
                            }}
                        >
                            {/* 미리보기 */}
                            <div
                                style={{
                                    width: "100%",
                                    padding: 20,
                                    background: "#FAFAFA",
                                    border: "0.5px solid #E5E6E8",
                                }}
                            >
                                {/* InviteName.tsx의 렌더링을 반영한 미리보기 */}
                                <div
                                    style={{
                                        alignSelf: "stretch",
                                        textAlign: "center",
                                        color: "black",
                                        fontSize: 16,
                                        fontFamily: "Pretendard Regular",
                                        lineHeight: "32px",
                                        wordWrap: "break-word",
                                    }}
                                >
                                    {renderInvitationSegmentsPreview(
                                        inviteData.invitationText
                                    )}
                                </div>

                                <div
                                    style={{
                                        width: "100%",
                                        whiteSpace: "nowrap",
                                        display: "flex",
                                        justifyContent: "center",
                                        alignItems: "flex-start",
                                        gap: 20,
                                        marginTop: 16,
                                        marginLeft: "auto",
                                        marginRight: "auto",
                                    }}
                                >
                                    {/* 좌측 부모/호칭 컬럼 */}
                                    <div
                                        style={{
                                            width: "100%",
                                            display: "inline-flex",
                                            flexDirection: "column",
                                            justifyContent: "flex-start",
                                            alignItems: "flex-start",
                                        }}
                                    >
                                        {/* 신랑 부모 라인 */}
                                        <div
                                            style={{
                                                display: "inline-flex",
                                                justifyContent: "flex-start",
                                                alignItems: "center",
                                                gap: 4,
                                            }}
                                        >
                                            <div
                                                style={{
                                                    justifyContent:
                                                        "flex-start",
                                                    alignItems: "center",
                                                    gap: 4,
                                                    display: "flex",
                                                }}
                                            >
                                                {inviteData.showGroomFatherChrysanthemum && (
                                                    <InlineChrysanthemumIcon />
                                                )}
                                                <div
                                                    style={{
                                                        color: "black",
                                                        fontSize: 18,
                                                        fontFamily:
                                                            "Pretendard Regular",
                                                        lineHeight: "32px",
                                                        wordWrap: "break-word",
                                                    }}
                                                >
                                                    {inviteData.groomFatherName ||
                                                        ""}
                                                </div>
                                                {dotNeededLocal(
                                                    inviteData.groomFatherName,
                                                    inviteData.groomMotherName
                                                ) && (
                                                    <div
                                                        style={{
                                                            color: "black",
                                                            fontSize: 18,
                                                            fontFamily:
                                                                "Pretendard Regular",
                                                            lineHeight: "32px",
                                                            wordWrap:
                                                                "break-word",
                                                        }}
                                                    >
                                                        ·
                                                    </div>
                                                )}
                                                {inviteData.showGroomMotherChrysanthemum && (
                                                    <InlineChrysanthemumIcon />
                                                )}
                                                <div
                                                    style={{
                                                        color: "black",
                                                        fontSize: 18,
                                                        fontFamily:
                                                            "Pretendard Regular",
                                                        lineHeight: "32px",
                                                        wordWrap: "break-word",
                                                    }}
                                                >
                                                    {inviteData.groomMotherName ||
                                                        ""}
                                                </div>
                                            </div>
                                            <div
                                                style={{
                                                    color: "black",
                                                    fontSize: 18,
                                                    fontFamily:
                                                        "Pretendard Regular",
                                                    lineHeight: "32px",
                                                    wordWrap: "break-word",
                                                }}
                                            >
                                                의
                                            </div>
                                            <div
                                                style={{
                                                    color: "black",
                                                    fontSize: 18,
                                                    fontFamily:
                                                        "Pretendard Regular",
                                                    lineHeight: "32px",
                                                    wordWrap: "break-word",
                                                }}
                                            >
                                                {inviteData.sonLabel || "아들"}
                                            </div>
                                        </div>
                                        {/* 신부 부모 라인 */}
                                        <div
                                            style={{
                                                display: "inline-flex",
                                                justifyContent: "flex-start",
                                                alignItems: "center",
                                                gap: 4,
                                            }}
                                        >
                                            <div
                                                style={{
                                                    justifyContent:
                                                        "flex-start",
                                                    alignItems: "center",
                                                    gap: 4,
                                                    display: "flex",
                                                }}
                                            >
                                                {inviteData.showBrideFatherChrysanthemum && (
                                                    <InlineChrysanthemumIcon />
                                                )}
                                                <div
                                                    style={{
                                                        color: "black",
                                                        fontSize: 18,
                                                        fontFamily:
                                                            "Pretendard Regular",
                                                        lineHeight: "32px",
                                                        wordWrap: "break-word",
                                                    }}
                                                >
                                                    {inviteData.brideFatherName ||
                                                        ""}
                                                </div>
                                                {dotNeededLocal(
                                                    inviteData.brideFatherName,
                                                    inviteData.brideMotherName
                                                ) && (
                                                    <div
                                                        style={{
                                                            color: "black",
                                                            fontSize: 18,
                                                            fontFamily:
                                                                "Pretendard Regular",
                                                            lineHeight: "32px",
                                                            wordWrap:
                                                                "break-word",
                                                        }}
                                                    >
                                                        ·
                                                    </div>
                                                )}
                                                {inviteData.showBrideMotherChrysanthemum && (
                                                    <InlineChrysanthemumIcon />
                                                )}
                                                <div
                                                    style={{
                                                        color: "black",
                                                        fontSize: 18,
                                                        fontFamily:
                                                            "Pretendard Regular",
                                                        lineHeight: "32px",
                                                        wordWrap: "break-word",
                                                    }}
                                                >
                                                    {inviteData.brideMotherName ||
                                                        ""}
                                                </div>
                                            </div>
                                            <div
                                                style={{
                                                    color: "black",
                                                    fontSize: 18,
                                                    fontFamily:
                                                        "Pretendard Regular",
                                                    lineHeight: "32px",
                                                    wordWrap: "break-word",
                                                }}
                                            >
                                                의
                                            </div>
                                            <div
                                                style={{
                                                    color: "black",
                                                    fontSize: 18,
                                                    fontFamily:
                                                        "Pretendard Regular",
                                                    lineHeight: "32px",
                                                    wordWrap: "break-word",
                                                }}
                                            >
                                                {inviteData.daughterLabel ||
                                                    "딸"}
                                            </div>
                                        </div>
                                    </div>
                                    {/* 우측 이름 컬럼 */}
                                    <div
                                        style={{
                                            width: "100%",
                                            flexDirection: "column",
                                            justifyContent: "flex-start",
                                            alignItems: "flex-start",
                                            display: "inline-flex",
                                        }}
                                    >
                                        <div
                                            style={{
                                                alignSelf: "stretch",
                                                color: "black",
                                                fontSize: 18,
                                                fontFamily:
                                                    "Pretendard SemiBold",
                                                lineHeight: "32px",
                                                wordWrap: "break-word",
                                            }}
                                        >
                                            {inviteData.groomName || ""}
                                        </div>
                                        <div
                                            style={{
                                                alignSelf: "stretch",
                                                color: "black",
                                                fontSize: 18,
                                                fontFamily:
                                                    "Pretendard SemiBold",
                                                lineHeight: "32px",
                                                wordWrap: "break-word",
                                            }}
                                        >
                                            {inviteData.brideName || ""}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div
                                style={{
                                    fontSize: 12,
                                    color: "#7F7F7F",
                                    textAlign: "center",
                                }}
                            >
                                미리보기
                            </div>

                            {/* 초대글 본문 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <span
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    초대글
                                </span>
                                <div
                                    style={{
                                        width: "100%",
                                        padding: 12,
                                        background: "#FAFAFA",
                                        border: "0.5px solid #E5E6E8",
                                    }}
                                >
                                    <textarea
                                        id="inviteTextArea"
                                        value={inviteData.invitationText}
                                        onChange={(e) =>
                                            updateInviteField(
                                                "invitationText",
                                                e.target.value
                                            )
                                        }
                                        rows={6}
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            background: "transparent",
                                            fontFamily: "Pretendard",
                                            fontSize: 12,
                                            lineHeight: "20px",
                                            color: inviteData.invitationText
                                                ? "black"
                                                : "#ADADAD",
                                            resize: "vertical",
                                        }}
                                        placeholder={
                                            "민준과 서윤 결혼합니다.\n저희 두 사람이 함께하는 새로운 시작에\n귀한 발걸음으로 축복해 주시면 감사하겠습니다."
                                        }
                                    />
                                </div>
                                <div
                                    style={{
                                        display: "flex",
                                        gap: 4,
                                        justifyContent: "flex-end",
                                    }}
                                >
                                    <button
                                        type="button"
                                        onClick={() =>
                                            insertInviteFormat("bold")
                                        }
                                        style={{
                                            padding: "4px 8px",
                                            background: "white",
                                            border: "0.5px solid #E5E6E8",
                                            fontSize: 12,
                                            cursor: "pointer",
                                        }}
                                    >
                                        볼드
                                    </button>
                                    <button
                                        type="button"
                                        onClick={() =>
                                            insertInviteFormat("quote")
                                        }
                                        style={{
                                            padding: "4px 8px",
                                            background: "white",
                                            border: "0.5px solid #E5E6E8",
                                            fontSize: 12,
                                            cursor: "pointer",
                                        }}
                                    >
                                        인용
                                    </button>
                                </div>
                            </div>

                            {/* 신랑측 성함 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <span
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    신랑측 성함
                                </span>
                                <div
                                    style={{
                                        width: "100%",
                                        display: "inline-flex",
                                        gap: 8,
                                        alignItems: "flex-start",
                                    }}
                                >
                                    <div
                                        style={{
                                            flex: 1,
                                            display: "flex",
                                            flexDirection: "column",
                                            gap: 8,
                                        }}
                                    >
                                        <div
                                            style={{
                                                height: 40,
                                                padding: 12,
                                                border: "0.5px solid #E5E6E8",
                                                display: "inline-flex",
                                                alignItems: "center",
                                                gap: 10,
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    inviteData.groomFatherName
                                                }
                                                onChange={(e) =>
                                                    updateInviteField(
                                                        "groomFatherName",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="아버지 성함"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                }}
                                            />
                                        </div>
                                        <label
                                            style={{
                                                display: "inline-flex",
                                                alignItems: "center",
                                                gap: 8,
                                                fontSize: 12,
                                                color: "#757575",
                                            }}
                                        >
                                            <input
                                                type="checkbox"
                                                checked={
                                                    !!inviteData.showGroomFatherChrysanthemum
                                                }
                                                onChange={(e) =>
                                                    updateInviteField(
                                                        "showGroomFatherChrysanthemum",
                                                        e.target.checked
                                                    )
                                                }
                                            />
                                            국화꽃 표시
                                        </label>
                                    </div>
                                    <div
                                        style={{
                                            flex: 1,
                                            display: "flex",
                                            flexDirection: "column",
                                            gap: 8,
                                        }}
                                    >
                                        <div
                                            style={{
                                                height: 40,
                                                padding: 12,
                                                border: "0.5px solid #E5E6E8",
                                                display: "inline-flex",
                                                alignItems: "center",
                                                gap: 10,
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    inviteData.groomMotherName
                                                }
                                                onChange={(e) =>
                                                    updateInviteField(
                                                        "groomMotherName",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="어머니 성함"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                }}
                                            />
                                        </div>
                                        <label
                                            style={{
                                                display: "inline-flex",
                                                alignItems: "center",
                                                gap: 8,
                                                fontSize: 12,
                                                color: "#757575",
                                            }}
                                        >
                                            <input
                                                type="checkbox"
                                                checked={
                                                    !!inviteData.showGroomMotherChrysanthemum
                                                }
                                                onChange={(e) =>
                                                    updateInviteField(
                                                        "showGroomMotherChrysanthemum",
                                                        e.target.checked
                                                    )
                                                }
                                            />
                                            국화꽃 표시
                                        </label>
                                    </div>
                                    {/* 호칭 */}
                                    <div
                                        style={{
                                            height: 40,
                                            padding: 12,
                                            border: "0.5px solid #E5E6E8",
                                            display: "flex",
                                            alignItems: "center",
                                            gap: 10,
                                        }}
                                    >
                                        <select
                                            value={inviteData.sonLabel}
                                            onChange={(e) =>
                                                updateInviteField(
                                                    "sonLabel",
                                                    e.target.value
                                                )
                                            }
                                            style={{
                                                border: "none",
                                                outline: "none",
                                                fontSize: 12,
                                            }}
                                        >
                                            {[
                                                "아들",
                                                "장남",
                                                "차남",
                                                "삼남",
                                            ].map((opt) => (
                                                <option key={opt} value={opt}>
                                                    {opt}
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                </div>
                                <div
                                    style={{
                                        height: 40,
                                        padding: 12,
                                        border: "0.5px solid #E5E6E8",
                                        display: "inline-flex",
                                        alignItems: "center",
                                        gap: 10,
                                    }}
                                >
                                    <input
                                        type="text"
                                        value={inviteData.groomName}
                                        onChange={(e) =>
                                            updateInviteField(
                                                "groomName",
                                                e.target.value
                                            )
                                        }
                                        placeholder="신랑 성함"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            fontSize: 12,
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 신부측 성함 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <span
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    신부측 성함
                                </span>
                                <div
                                    style={{
                                        width: "100%",
                                        display: "inline-flex",
                                        gap: 8,
                                        alignItems: "flex-start",
                                    }}
                                >
                                    <div
                                        style={{
                                            flex: 1,
                                            display: "flex",
                                            flexDirection: "column",
                                            gap: 8,
                                        }}
                                    >
                                        <div
                                            style={{
                                                height: 40,
                                                padding: 12,
                                                border: "0.5px solid #E5E6E8",
                                                display: "inline-flex",
                                                alignItems: "center",
                                                gap: 10,
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    inviteData.brideFatherName
                                                }
                                                onChange={(e) =>
                                                    updateInviteField(
                                                        "brideFatherName",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="아버지 성함"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                }}
                                            />
                                        </div>
                                        <label
                                            style={{
                                                display: "inline-flex",
                                                alignItems: "center",
                                                gap: 8,
                                                fontSize: 12,
                                                color: "#757575",
                                            }}
                                        >
                                            <input
                                                type="checkbox"
                                                checked={
                                                    !!inviteData.showBrideFatherChrysanthemum
                                                }
                                                onChange={(e) =>
                                                    updateInviteField(
                                                        "showBrideFatherChrysanthemum",
                                                        e.target.checked
                                                    )
                                                }
                                            />
                                            국화꽃 표시
                                        </label>
                                    </div>
                                    <div
                                        style={{
                                            flex: 1,
                                            display: "flex",
                                            flexDirection: "column",
                                            gap: 8,
                                        }}
                                    >
                                        <div
                                            style={{
                                                height: 40,
                                                padding: 12,
                                                border: "0.5px solid #E5E6E8",
                                                display: "inline-flex",
                                                alignItems: "center",
                                                gap: 10,
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    inviteData.brideMotherName
                                                }
                                                onChange={(e) =>
                                                    updateInviteField(
                                                        "brideMotherName",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="어머니 성함"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                }}
                                            />
                                        </div>
                                        <label
                                            style={{
                                                display: "inline-flex",
                                                alignItems: "center",
                                                gap: 8,
                                                fontSize: 12,
                                                color: "#757575",
                                            }}
                                        >
                                            <input
                                                type="checkbox"
                                                checked={
                                                    !!inviteData.showBrideMotherChrysanthemum
                                                }
                                                onChange={(e) =>
                                                    updateInviteField(
                                                        "showBrideMotherChrysanthemum",
                                                        e.target.checked
                                                    )
                                                }
                                            />
                                            국화꽃 표시
                                        </label>
                                    </div>
                                    {/* 호칭 */}
                                    <div
                                        style={{
                                            height: 40,
                                            padding: 12,
                                            border: "0.5px solid #E5E6E8",
                                            display: "flex",
                                            alignItems: "center",
                                            gap: 10,
                                        }}
                                    >
                                        <select
                                            value={inviteData.daughterLabel}
                                            onChange={(e) =>
                                                updateInviteField(
                                                    "daughterLabel",
                                                    e.target.value
                                                )
                                            }
                                            style={{
                                                border: "none",
                                                outline: "none",
                                                fontSize: 12,
                                            }}
                                        >
                                            {["딸", "장녀", "차녀", "삼녀"].map(
                                                (opt) => (
                                                    <option
                                                        key={opt}
                                                        value={opt}
                                                    >
                                                        {opt}
                                                    </option>
                                                )
                                            )}
                                        </select>
                                    </div>
                                </div>
                                <div
                                    style={{
                                        height: 40,
                                        padding: 12,
                                        border: "0.5px solid #E5E6E8",
                                        display: "inline-flex",
                                        alignItems: "center",
                                        gap: 10,
                                    }}
                                >
                                    <input
                                        type="text"
                                        value={inviteData.brideName}
                                        onChange={(e) =>
                                            updateInviteField(
                                                "brideName",
                                                e.target.value
                                            )
                                        }
                                        placeholder="신부 성함"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            fontSize: 12,
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 저장 */}
                            <button
                                onClick={saveInviteData}
                                disabled={inviteSaving}
                                style={{
                                    width: "100%",
                                    height: 40,
                                    padding: 12,
                                    backgroundColor: inviteSaving
                                        ? "#f5f5f5"
                                        : "black",
                                    color: inviteSaving ? "#999" : "white",
                                    border: "none",
                                    fontSize: 12,
                                    fontFamily: "Pretendard",
                                    fontWeight: 400,
                                    cursor: inviteSaving
                                        ? "not-allowed"
                                        : "pointer",
                                    marginTop: 12,
                                }}
                            >
                                {inviteSaving ? "저장 중..." : "저장"}
                            </button>
                        </div>
                    </div>
                )}
                {openSections.invite && (
                    <div style={{ width: "100%", height: 8 }} />
                )}

                {/* 연락처 */}
                <button
                    onClick={() => toggleSection("contacts")}
                    style={{
                        width: "100%",
                        padding: "14px",
                        backgroundColor: "white",
                        border: "none",
                        borderBottom: "0.5px solid #FAFAFA",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        cursor: "pointer",
                        fontSize: "14px",
                        fontWeight: "400",
                        color: "#757575",
                        fontFamily: "Pretendard",
                        marginBottom: "8px",
                    }}
                >
                    <span>연락처</span>
                    <div
                        style={{
                            width: "32px",
                            height: "32px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            padding: "13px 9px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "5.5px",
                                border: "1.5px solid #757575",
                                borderLeft: "none",
                                borderRight: "none",
                                borderBottom: "none",
                                transform: openSections.contacts
                                    ? "rotate(180deg)"
                                    : "rotate(0deg)",
                                transition: "transform 0.2s ease",
                            }}
                        />
                    </div>
                </button>
                {openSections.contacts && (
                    <div
                        style={{
                            padding: "32px 16px",
                            backgroundColor: "white",
                            display: "flex",
                            justifyContent: "flex-start",
                            alignItems: "flex-start",
                            gap: "10px",
                        }}
                    >
                        <div
                            style={{
                                width: "100%",
                                display: "flex",
                                flexDirection: "column",
                                gap: "12px",
                            }}
                        >
                            {/* 신랑 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <div
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    신랑
                                </div>
                                <div
                                    style={{
                                        width: "100%",
                                        height: 40,
                                        padding: 12,
                                        background: "white",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.25,
                                        display: "flex",
                                        alignItems: "center",
                                    }}
                                >
                                    <input
                                        type="tel"
                                        value={
                                            selectedContact?.groom_phone || ""
                                        }
                                        onChange={(e) =>
                                            handleContactInputChange(
                                                "groom_phone",
                                                e.target.value
                                            )
                                        }
                                        placeholder="010-1234-5678"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            color: selectedContact?.groom_phone
                                                ? "black"
                                                : "#ADADAD",
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 신랑 아버지 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <div
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    신랑 아버지
                                </div>
                                <div
                                    style={{
                                        width: "100%",
                                        height: 40,
                                        padding: 12,
                                        background: "white",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.25,
                                        display: "flex",
                                        alignItems: "center",
                                    }}
                                >
                                    <input
                                        type="tel"
                                        value={
                                            selectedContact?.groom_father_phone ||
                                            ""
                                        }
                                        onChange={(e) =>
                                            handleContactInputChange(
                                                "groom_father_phone",
                                                e.target.value
                                            )
                                        }
                                        placeholder="010-1234-5678"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            color: selectedContact?.groom_father_phone
                                                ? "black"
                                                : "#ADADAD",
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 신랑 어머니 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <div
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    신랑 어머니
                                </div>
                                <div
                                    style={{
                                        width: "100%",
                                        height: 40,
                                        padding: 12,
                                        background: "white",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.25,
                                        display: "flex",
                                        alignItems: "center",
                                    }}
                                >
                                    <input
                                        type="tel"
                                        value={
                                            selectedContact?.groom_mother_phone ||
                                            ""
                                        }
                                        onChange={(e) =>
                                            handleContactInputChange(
                                                "groom_mother_phone",
                                                e.target.value
                                            )
                                        }
                                        placeholder="010-1234-5678"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            color: selectedContact?.groom_mother_phone
                                                ? "black"
                                                : "#ADADAD",
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 신부 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <div
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    신부
                                </div>
                                <div
                                    style={{
                                        width: "100%",
                                        height: 40,
                                        padding: 12,
                                        background: "white",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.25,
                                        display: "flex",
                                        alignItems: "center",
                                    }}
                                >
                                    <input
                                        type="tel"
                                        value={
                                            selectedContact?.bride_phone || ""
                                        }
                                        onChange={(e) =>
                                            handleContactInputChange(
                                                "bride_phone",
                                                e.target.value
                                            )
                                        }
                                        placeholder="010-1234-5678"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            color: selectedContact?.bride_phone
                                                ? "black"
                                                : "#ADADAD",
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 신부 아버지 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <div
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    신부 아버지
                                </div>
                                <div
                                    style={{
                                        width: "100%",
                                        height: 40,
                                        padding: 12,
                                        background: "white",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.25,
                                        display: "flex",
                                        alignItems: "center",
                                    }}
                                >
                                    <input
                                        type="tel"
                                        value={
                                            selectedContact?.bride_father_phone ||
                                            ""
                                        }
                                        onChange={(e) =>
                                            handleContactInputChange(
                                                "bride_father_phone",
                                                e.target.value
                                            )
                                        }
                                        placeholder="010-1234-5678"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            color: selectedContact?.bride_father_phone
                                                ? "black"
                                                : "#ADADAD",
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 신부 어머니 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 8,
                                }}
                            >
                                <div
                                    style={{
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    신부 어머니
                                </div>
                                <div
                                    style={{
                                        width: "100%",
                                        height: 40,
                                        padding: 12,
                                        background: "white",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.25,
                                        display: "flex",
                                        alignItems: "center",
                                    }}
                                >
                                    <input
                                        type="tel"
                                        value={
                                            selectedContact?.bride_mother_phone ||
                                            ""
                                        }
                                        onChange={(e) =>
                                            handleContactInputChange(
                                                "bride_mother_phone",
                                                e.target.value
                                            )
                                        }
                                        placeholder="010-1234-5678"
                                        style={{
                                            width: "100%",
                                            border: "none",
                                            outline: "none",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            color: selectedContact?.bride_mother_phone
                                                ? "black"
                                                : "#ADADAD",
                                        }}
                                    />
                                </div>
                            </div>

                            {/* 저장 버튼 */}
                            <div
                                style={{
                                    display: "flex",
                                    justifyContent: "flex-end",
                                    gap: 8,
                                    marginTop: 8,
                                }}
                            >
                                <button
                                    onClick={handleSaveContactInline}
                                    disabled={loading}
                                    style={{
                                        padding: "10px 14px",
                                        background: loading
                                            ? "#9ca3af"
                                            : "#111827",
                                        color: "white",
                                        border: "none",
                                    }}
                                >
                                    {loading ? "저장 중..." : "저장"}
                                </button>
                            </div>
                        </div>
                    </div>
                )}
                {openSections.contacts && (
                    <div style={{ width: "100%", height: 8 }} />
                )}
                {/* 캘린더 */}
                <button
                    onClick={() => toggleSection("calendar")}
                    style={{
                        width: "100%",
                        padding: "14px",
                        backgroundColor: "white",
                        border: "none",
                        borderBottom: "0.5px solid #FAFAFA",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        cursor: "pointer",
                        fontSize: "14px",
                        fontWeight: "400",
                        color: "#757575",
                        fontFamily: "Pretendard",
                        marginBottom: "8px",
                    }}
                >
                    <span>캘린더</span>
                    <div
                        style={{
                            width: "32px",
                            height: "32px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            padding: "13px 9px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "5.5px",
                                border: "1.5px solid #757575",
                                borderLeft: "none",
                                borderRight: "none",
                                borderBottom: "none",
                                transform: openSections.calendar
                                    ? "rotate(180deg)"
                                    : "rotate(0deg)",
                                transition: "transform 0.2s ease",
                            }}
                        />
                    </div>
                </button>
                {openSections.calendar && (
                    <div
                        style={{
                            padding: "32px 16px",
                            backgroundColor: "white",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "flex-start",
                            gap: 10,
                        }}
                    >
                        <div
                            style={{
                                width: 316,
                                display: "flex",
                                flexDirection: "column",
                                gap: 12,
                                alignItems: "flex-start",
                            }}
                        >
                            {/* 미리보기 영역 */}
                            <div
                                style={{
                                    width: "100%",
                                    display: "flex",
                                    flexDirection: "column",
                                    alignItems: "center",
                                    gap: 12,
                                }}
                            >
                                <div
                                    style={{
                                        width: 316,
                                        height: 470,
                                        background: "#FAFAFA",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.25,
                                        display: "flex",
                                        alignItems: "center",
                                        justifyContent: "center",
                                    }}
                                >
                                    {/* 기존 캘린더 미리보기 */}
                                    <InlineCalendarPreview
                                        date={pageSettings.wedding_date}
                                        hour={pageSettings.wedding_hour}
                                        minute={pageSettings.wedding_minute}
                                        groomName={pageSettings.groom_name_kr}
                                        brideName={pageSettings.bride_name_kr}
                                        highlightColor={
                                            pageSettings.highlight_color ||
                                            "#e0e0e0"
                                        }
                                        highlightShape={
                                            (pageSettings.highlight_shape as
                                                | "circle"
                                                | "heart") || "circle"
                                        }
                                        highlightTextColor={
                                            (pageSettings.highlight_text_color as
                                                | "black"
                                                | "white"
                                                | "#000000"
                                                | "#ffffff") || "black"
                                        }
                                    />
                                </div>
                                <div
                                    style={{
                                        width: "100%",
                                        textAlign: "center",
                                        color: "#7F7F7F",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 400,
                                    }}
                                >
                                    미리보기
                                </div>
                            </div>

                            {/* 설정 섹션들 */}
                            <div
                                style={{
                                    width: "100%",
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 16,
                                    alignItems: "flex-start",
                                }}
                            >
                                {/* 예식일 표시 모양 */}
                                <div
                                    style={{
                                        width: "100%",
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                        alignItems: "flex-start",
                                    }}
                                >
                                    <div
                                        style={{
                                            textAlign: "center",
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            fontWeight: 600,
                                        }}
                                    >
                                        예식일 표시 모양
                                    </div>
                                    <div
                                        style={{
                                            display: "flex",
                                            gap: 8,
                                            alignItems: "center",
                                        }}
                                    >
                                        {/* 원형 라디오 버튼 */}
                                        <div
                                            style={{
                                                display: "flex",
                                                alignItems: "center",
                                                gap: 4,
                                                cursor: "pointer",
                                            }}
                                            onClick={() =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    highlight_shape: "circle",
                                                })
                                            }
                                        >
                                            <div
                                                style={{
                                                    width: 12,
                                                    height: 12,
                                                    borderRadius: "50%",
                                                    border: "1px solid #E5E6E8",
                                                    display: "flex",
                                                    alignItems: "center",
                                                    justifyContent: "center",
                                                }}
                                            >
                                                {(pageSettings.highlight_shape ||
                                                    "circle") === "circle" && (
                                                    <div
                                                        style={{
                                                            width: 7,
                                                            height: 7,
                                                            backgroundColor:
                                                                "black",
                                                            borderRadius: "50%",
                                                        }}
                                                    />
                                                )}
                                            </div>
                                            <div
                                                style={{
                                                    color: "#757575",
                                                    fontSize: 12,
                                                    fontFamily: "Inter",
                                                    fontWeight: 400,
                                                }}
                                            >
                                                원형
                                            </div>
                                        </div>

                                        {/* 하트 라디오 버튼 */}
                                        <div
                                            style={{
                                                display: "flex",
                                                alignItems: "center",
                                                gap: 4,
                                                cursor: "pointer",
                                            }}
                                            onClick={() =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    highlight_shape: "heart",
                                                })
                                            }
                                        >
                                            <div
                                                style={{
                                                    width: 12,
                                                    height: 12,
                                                    borderRadius: "50%",
                                                    border: "1px solid #E5E6E8",
                                                    display: "flex",
                                                    alignItems: "center",
                                                    justifyContent: "center",
                                                }}
                                            >
                                                {pageSettings.highlight_shape ===
                                                    "heart" && (
                                                    <div
                                                        style={{
                                                            width: 7,
                                                            height: 7,
                                                            backgroundColor:
                                                                "black",
                                                            borderRadius: "50%",
                                                        }}
                                                    />
                                                )}
                                            </div>
                                            <div
                                                style={{
                                                    color: "#757575",
                                                    fontSize: 12,
                                                    fontFamily: "Inter",
                                                    fontWeight: 400,
                                                }}
                                            >
                                                하트
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* 모양 색상 */}
                                <div
                                    style={{
                                        width: "100%",
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                        alignItems: "flex-start",
                                    }}
                                >
                                    <div
                                        style={{
                                            textAlign: "center",
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard SemiBold",
                                            fontWeight: 600,
                                        }}
                                    >
                                        모양 색상
                                    </div>
                                    <div
                                        style={{
                                            width: "100%",
                                            display: "flex",
                                            flexDirection: "column",
                                            gap: 12,
                                            alignItems: "flex-start",
                                        }}
                                    >
                                        {/* 색상 선택 버튼들 */}
                                        <div
                                            style={{
                                                width: "100%",
                                                padding: "0 20px",
                                                display: "flex",
                                                justifyContent: "space-between",
                                                alignItems: "center",
                                            }}
                                        >
                                            {[
                                                {
                                                    color: "#D9D9D9",
                                                    value: "#D9D9D9",
                                                },
                                                {
                                                    color: "black",
                                                    value: "black",
                                                },
                                                {
                                                    color: "#FF7A7A",
                                                    value: "#FF7A7A",
                                                },
                                                {
                                                    color: "#318947",
                                                    value: "#318947",
                                                },
                                            ].map((item, index) => (
                                                <div
                                                    key={index}
                                                    style={{
                                                        width: 32,
                                                        height: 32,
                                                        padding: 0,
                                                        borderRadius: 20,
                                                        border:
                                                            (pageSettings.highlight_color ||
                                                                "#e0e0e0") ===
                                                            item.value
                                                                ? "1.5px solid #757575"
                                                                : "1.5px solid #E5E6E8",
                                                        display: "flex",
                                                        alignItems: "center",
                                                        justifyContent:
                                                            "center",
                                                        cursor: "pointer",
                                                    }}
                                                    onClick={() =>
                                                        setPageSettings({
                                                            ...pageSettings,
                                                            highlight_color:
                                                                item.value,
                                                        })
                                                    }
                                                >
                                                    <div
                                                        style={{
                                                            width: 20,
                                                            height: 20,
                                                            backgroundColor:
                                                                item.color,
                                                            borderRadius: "50%",
                                                        }}
                                                    />
                                                </div>
                                            ))}
                                        </div>

                                        {/* 색상바 */}
                                        <div
                                            style={{
                                                width: "100%",
                                                padding: 6,
                                                border: "1px solid #E5E6E8",
                                                borderRadius: 4,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <div
                                                style={{
                                                    width: "100%",
                                                    height: 28,
                                                    backgroundColor:
                                                        pageSettings.highlight_color ||
                                                        "#e0e0e0",
                                                }}
                                            />
                                        </div>
                                    </div>
                                </div>

                                {/* 텍스트 색상 */}
                                <div
                                    style={{
                                        width: "100%",
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                        alignItems: "flex-start",
                                    }}
                                >
                                    <div
                                        style={{
                                            textAlign: "center",
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            fontWeight: 600,
                                        }}
                                    >
                                        텍스트 색상
                                    </div>
                                    <div
                                        style={{
                                            display: "flex",
                                            gap: 8,
                                            alignItems: "center",
                                        }}
                                    >
                                        {/* 검정 라디오 버튼 */}
                                        <div
                                            style={{
                                                display: "flex",
                                                alignItems: "center",
                                                gap: 4,
                                                cursor: "pointer",
                                            }}
                                            onClick={() =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    highlight_text_color:
                                                        "black",
                                                })
                                            }
                                        >
                                            <div
                                                style={{
                                                    width: 12,
                                                    height: 12,
                                                    borderRadius: "50%",
                                                    border: "1px solid #E5E6E8",
                                                    display: "flex",
                                                    alignItems: "center",
                                                    justifyContent: "center",
                                                }}
                                            >
                                                {(pageSettings.highlight_text_color ||
                                                    "black") === "black" && (
                                                    <div
                                                        style={{
                                                            width: 7,
                                                            height: 7,
                                                            backgroundColor:
                                                                "black",
                                                            borderRadius: "50%",
                                                        }}
                                                    />
                                                )}
                                            </div>
                                            <div
                                                style={{
                                                    color: "#757575",
                                                    fontSize: 12,
                                                    fontFamily: "Inter",
                                                    fontWeight: 400,
                                                }}
                                            >
                                                검정
                                            </div>
                                        </div>

                                        {/* 흰색 라디오 버튼 */}
                                        <div
                                            style={{
                                                display: "flex",
                                                alignItems: "center",
                                                gap: 4,
                                                cursor: "pointer",
                                            }}
                                            onClick={() =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    highlight_text_color:
                                                        "white",
                                                })
                                            }
                                        >
                                            <div
                                                style={{
                                                    width: 12,
                                                    height: 12,
                                                    borderRadius: "50%",
                                                    border: "1px solid #E5E6E8",
                                                    display: "flex",
                                                    alignItems: "center",
                                                    justifyContent: "center",
                                                }}
                                            >
                                                {pageSettings.highlight_text_color ===
                                                    "white" && (
                                                    <div
                                                        style={{
                                                            width: 7,
                                                            height: 7,
                                                            backgroundColor:
                                                                "black",
                                                            borderRadius: "50%",
                                                        }}
                                                    />
                                                )}
                                            </div>
                                            <div
                                                style={{
                                                    color: "#757575",
                                                    fontSize: 12,
                                                    fontFamily: "Inter",
                                                    fontWeight: 400,
                                                }}
                                            >
                                                흰색
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                )}
                {openSections.calendar && (
                    <div style={{ width: "100%", height: 8 }} />
                )}
                {/* 갤러리 */}
                <button
                    onClick={() => toggleSection("images")}
                    style={{
                        width: "100%",
                        padding: "14px",
                        backgroundColor: "white",
                        border: "none",
                        borderBottom: "0.5px solid #FAFAFA",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        cursor: "pointer",
                        fontSize: "14px",
                        fontWeight: "400",
                        color: "#757575",
                        fontFamily: "Pretendard",
                        marginBottom: "8px",
                    }}
                >
                    <span>갤러리</span>
                    <div
                        style={{
                            width: "32px",
                            height: "32px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            padding: "13px 9px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "5.5px",
                                border: "1.5px solid #757575",
                                borderLeft: "none",
                                borderRight: "none",
                                borderBottom: "none",
                                transform: openSections.images
                                    ? "rotate(180deg)"
                                    : "rotate(0deg)",
                                transition: "transform 0.2s ease",
                            }}
                        />
                    </div>
                </button>

                {/* 교통 안내 */}
                <button
                    onClick={() => toggleSection("transport")}
                    style={{
                        width: "100%",
                        padding: "14px",
                        backgroundColor: "white",
                        border: "none",
                        borderBottom: "0.5px solid #FAFAFA",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        cursor: "pointer",
                        fontSize: "14px",
                        fontWeight: "400",
                        color: "#757575",
                        fontFamily: "Pretendard",
                        marginBottom: "8px",
                    }}
                >
                    <span>교통 안내</span>
                    <div
                        style={{
                            width: "32px",
                            height: "32px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            padding: "13px 9px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "5.5px",
                                border: "1.5px solid #757575",
                                borderLeft: "none",
                                borderRight: "none",
                                borderBottom: "none",
                                transform: openSections.transport
                                    ? "rotate(180deg)"
                                    : "rotate(0deg)",
                                transition: "transform 0.2s ease",
                            }}
                        />
                    </div>
                </button>
                {openSections.transport && (
                    <div
                        style={{
                            padding: "32px 16px",
                            backgroundColor: "white",
                            display: "flex",
                            justifyContent: "flex-start",
                            alignItems: "flex-start",
                            gap: 10,
                        }}
                    >
                        <div
                            style={{
                                width: "100%",
                                display: "flex",
                                flexDirection: "column",
                                gap: 12,
                                alignItems: "flex-start",
                            }}
                        >
                            <TransportTab
                                pageId={currentPageId}
                                tokenGetter={getAuthToken}
                            />
                        </div>
                    </div>
                )}
                {openSections.transport && (
                    <div style={{ width: "100%", height: 8 }} />
                )}
                {/* 계좌 안내 */}
                <button
                    onClick={() => toggleSection("account")}
                    style={{
                        width: "100%",
                        padding: "14px",
                        backgroundColor: "white",
                        border: "none",
                        borderBottom: "0.5px solid #FAFAFA",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        cursor: "pointer",
                        fontSize: "14px",
                        fontWeight: "400",
                        color: "#757575",
                        fontFamily: "Pretendard",
                        marginBottom: "8px",
                    }}
                >
                    <span>계좌 안내</span>
                    <div
                        style={{
                            width: "32px",
                            height: "32px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            padding: "13px 9px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "5.5px",
                                border: "1.5px solid #757575",
                                borderLeft: "none",
                                borderRight: "none",
                                borderBottom: "none",
                                transform: openSections.account
                                    ? "rotate(180deg)"
                                    : "rotate(0deg)",
                                transition: "transform 0.2s ease",
                            }}
                        />
                    </div>
                </button>
                {openSections.account && (
                    <div
                        style={{
                            padding: "32px 16px",
                            backgroundColor: "white",
                            display: "flex",
                            justifyContent: "flex-start",
                            alignItems: "flex-start",
                            gap: "10px",
                        }}
                    >
                        <div
                            style={{
                                width: "100%",
                                display: "flex",
                                flexDirection: "column",
                                gap: "48px",
                            }}
                        >
                            {/* 계좌번호 입력 폼들 */}
                            {/* 신랑측 계좌 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 12,
                                }}
                            >
                                {/* 신랑 */}
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                    }}
                                >
                                    <div
                                        style={{
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard SemiBold",
                                            fontWeight: 600,
                                        }}
                                    >
                                        신랑
                                    </div>
                                    <div
                                        style={{
                                            display: "flex",
                                            gap: 6,
                                            width: "100%",
                                        }}
                                    >
                                        <div
                                            style={{
                                                flex: 0.3,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.groom_bank ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "groom_bank",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="은행명"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.groom_bank
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                        <div
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.groom_account ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "groom_account",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="계좌번호"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.groom_account
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                    </div>
                                </div>

                                {/* 신랑 아버지 */}
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                    }}
                                >
                                    <div
                                        style={{
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            fontWeight: 600,
                                        }}
                                    >
                                        신랑 아버지
                                    </div>
                                    <div
                                        style={{
                                            display: "flex",
                                            gap: 6,
                                            width: "100%",
                                        }}
                                    >
                                        <div
                                            style={{
                                                flex: 0.3,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.groom_father_bank ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "groom_father_bank",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="은행명"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.groom_father_bank
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                        <div
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.groom_father_account ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "groom_father_account",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="계좌번호"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.groom_father_account
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                    </div>
                                </div>

                                {/* 신랑 어머니 */}
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                    }}
                                >
                                    <div
                                        style={{
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            fontWeight: 600,
                                        }}
                                    >
                                        신랑 어머니
                                    </div>
                                    <div
                                        style={{
                                            display: "flex",
                                            gap: 6,
                                            width: "100%",
                                        }}
                                    >
                                        <div
                                            style={{
                                                flex: 0.3,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.groom_mother_bank ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "groom_mother_bank",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="은행명"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.groom_mother_bank
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                        <div
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.groom_mother_account ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "groom_mother_account",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="계좌번호"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.groom_mother_account
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* 신부측 계좌 */}
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 12,
                                }}
                            >
                                {/* 신부 */}
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                    }}
                                >
                                    <div
                                        style={{
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            fontWeight: 600,
                                        }}
                                    >
                                        신부
                                    </div>
                                    <div
                                        style={{
                                            display: "flex",
                                            gap: 6,
                                            width: "100%",
                                        }}
                                    >
                                        <div
                                            style={{
                                                flex: 0.3,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.bride_bank ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "bride_bank",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="은행명"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.bride_bank
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                        <div
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.bride_account ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "bride_account",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="계좌번호"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.bride_account
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                    </div>
                                </div>

                                {/* 신부 아버지 */}
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                    }}
                                >
                                    <div
                                        style={{
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            fontWeight: 600,
                                        }}
                                    >
                                        신부 아버지
                                    </div>
                                    <div
                                        style={{
                                            display: "flex",
                                            gap: 6,
                                            width: "100%",
                                        }}
                                    >
                                        <div
                                            style={{
                                                flex: 0.3,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.bride_father_bank ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "bride_father_bank",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="은행명"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.bride_father_bank
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                        <div
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.bride_father_account ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "bride_father_account",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="계좌번호"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.bride_father_account
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                    </div>
                                </div>

                                {/* 신부 어머니 */}
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: 8,
                                    }}
                                >
                                    <div
                                        style={{
                                            color: "black",
                                            fontSize: 12,
                                            fontFamily: "Pretendard",
                                            fontWeight: 600,
                                        }}
                                    >
                                        신부 어머니
                                    </div>
                                    <div
                                        style={{
                                            display: "flex",
                                            gap: 6,
                                            width: "100%",
                                        }}
                                    >
                                        <div
                                            style={{
                                                flex: 0.3,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.bride_mother_bank ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "bride_mother_bank",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="은행명"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.bride_mother_bank
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                        <div
                                            style={{
                                                flex: 1,
                                                height: 40,
                                                padding: 12,
                                                background: "white",
                                                border: "0.5px solid #E5E6E8",
                                                outlineOffset: -0.25,
                                                display: "flex",
                                                alignItems: "center",
                                            }}
                                        >
                                            <input
                                                type="text"
                                                value={
                                                    selectedContact?.bride_mother_account ||
                                                    ""
                                                }
                                                onChange={(e) =>
                                                    handleContactInputChange(
                                                        "bride_mother_account",
                                                        e.target.value
                                                    )
                                                }
                                                placeholder="계좌번호"
                                                style={{
                                                    width: "100%",
                                                    border: "none",
                                                    outline: "none",
                                                    fontSize: 12,
                                                    fontFamily: "Pretendard",
                                                    color: selectedContact?.bride_mother_account
                                                        ? "black"
                                                        : "#ADADAD",
                                                }}
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* 저장 버튼 */}
                            <div
                                style={{
                                    display: "flex",
                                    justifyContent: "flex-end",
                                    gap: 8,
                                    marginTop: 8,
                                }}
                            >
                                <button
                                    onClick={handleSaveContactInline}
                                    disabled={loading}
                                    style={{
                                        width: "100%",
                                        padding: "10px 14px",
                                        background: loading
                                            ? "#9ca3af"
                                            : "#111827",
                                        color: "white",
                                        border: "none",
                                    }}
                                >
                                    {loading ? "저장 중..." : "저장"}
                                </button>
                            </div>
                        </div>
                    </div>
                )}
                {openSections.account && (
                    <div style={{ width: "100%", height: 8 }} />
                )}

                {/* 추가 기능 */}
                <button
                    onClick={() => toggleSection("kakaoShare")}
                    style={{
                        width: "100%",
                        padding: "14px",
                        backgroundColor: "white",
                        border: "none",
                        borderBottom: "0.5px solid #FAFAFA",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        cursor: "pointer",
                        fontSize: "14px",
                        fontWeight: "400",
                        color: "#757575",
                        fontFamily: "Pretendard",
                        marginBottom: "8px",
                    }}
                >
                    <span>추가 기능</span>
                    <div
                        style={{
                            width: "32px",
                            height: "32px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            padding: "13px 9px",
                        }}
                    >
                        <div
                            style={{
                                width: "12px",
                                height: "5.5px",
                                border: "1.5px solid #757575",
                                borderLeft: "none",
                                borderRight: "none",
                                borderBottom: "none",
                                transform: openSections.kakaoShare
                                    ? "rotate(180deg)"
                                    : "rotate(0deg)",
                                transition: "transform 0.2s ease",
                            }}
                        />
                    </div>
                </button>
            </div>

            {/* 알림 메시지 */}
            <AnimatePresence>
                {(error || success) && (
                    <motion.div
                        initial={{ opacity: 0, y: -20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        style={{
                            padding: "12px 20px",
                            borderRadius: "6px",
                            backgroundColor: error ? "#fef2f2" : "#f0fdf4",
                            border: `1px solid ${error ? "#fecaca" : "#bbf7d0"}`,
                            color: error ? "#dc2626" : "#16a34a",
                        }}
                    >
                        {error || success}
                    </motion.div>
                )}
            </AnimatePresence>

            {/* 기존 탭 컨텐츠 제거됨 - 아코디언으로 이동 */}
            {false && (
                <div
                    style={{
                        flex: 1,
                        overflowY: "auto",
                        padding: "20px",
                        backgroundColor: "#f5f5f5",
                    }}
                >
                    <div
                        style={{
                            backgroundColor: "white",
                            padding: "20px",
                        }}
                    >
                        <h2
                            style={{
                                fontSize: "18px",
                                fontWeight: "600",
                                color: "#000000",
                                margin: "0 0 20px 0",
                            }}
                        >
                            이름 설정
                        </h2>

                        {/* NameSection 미리보기 */}
                        <div
                            style={{
                                border: "1px solid #e5e7eb",
                                padding: 12,
                                marginBottom: 16,
                                background: "#fafafa",
                            }}
                        >
                            <div
                                style={{
                                    fontSize: 12,
                                    color: "#6b7280",
                                    marginBottom: 8,
                                }}
                            >
                                미리보기 - 이름 섹션
                            </div>
                            <InlineNameSection {...buildNameSectionProps()} />
                        </div>

                        {/* 신랑 정보 */}
                        <div style={{ marginBottom: "24px" }}>
                            <h3
                                style={{
                                    fontSize: "16px",
                                    fontWeight: 600,
                                    color: "#111827",
                                    margin: "0 0 12px 0",
                                    letterSpacing: "-0.01em",
                                }}
                            >
                                신랑 정보
                            </h3>
                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: "16px",
                                }}
                            >
                                <div>
                                    <label
                                        style={{
                                            display: "block",
                                            fontSize: "12px",
                                            fontWeight: 500,
                                            color: "#6b7280",
                                            marginBottom: 6,
                                            letterSpacing: "0.02em",
                                            textTransform: "uppercase",
                                        }}
                                    >
                                        한글 이름
                                    </label>
                                    <input
                                        type="text"
                                        value={pageSettings.groom_name_kr}
                                        onChange={(e) =>
                                            setPageSettings({
                                                ...pageSettings,
                                                groom_name_kr: e.target.value,
                                            })
                                        }
                                        style={{
                                            width: "100%",
                                            padding: "12px 14px",
                                            border: "1px solid #e5e7eb",
                                            borderRadius: 8,
                                            fontSize: 14,
                                            outline: "none",
                                            boxSizing: "border-box",
                                            backgroundColor: "#ffffff",
                                            color: "#111827",
                                            transition:
                                                "border-color .15s ease",
                                        }}
                                        onFocus={(e) => {
                                            e.currentTarget.style.borderColor =
                                                "#9ca3af"
                                        }}
                                        onBlur={(e) => {
                                            e.currentTarget.style.borderColor =
                                                "#e5e7eb"
                                        }}
                                        placeholder="예: 김태호"
                                    />
                                </div>
                                <div>
                                    <label
                                        style={{
                                            display: "block",
                                            fontSize: "12px",
                                            fontWeight: 500,
                                            color: "#6b7280",
                                            marginBottom: 6,
                                            letterSpacing: "0.02em",
                                            textTransform: "uppercase",
                                        }}
                                    >
                                        영문 이름
                                    </label>
                                    <input
                                        type="text"
                                        value={pageSettings.groom_name_en}
                                        onChange={(e) =>
                                            setPageSettings({
                                                ...pageSettings,
                                                groom_name_en: e.target.value,
                                            })
                                        }
                                        style={{
                                            width: "100%",
                                            padding: "12px 14px",
                                            border: "1px solid #e5e7eb",
                                            borderRadius: 8,
                                            fontSize: 14,
                                            outline: "none",
                                            boxSizing: "border-box",
                                            backgroundColor: "#ffffff",
                                            color: "#111827",
                                            transition:
                                                "border-color .15s ease",
                                        }}
                                        onFocus={(e) => {
                                            e.currentTarget.style.borderColor =
                                                "#9ca3af"
                                        }}
                                        onBlur={(e) => {
                                            e.currentTarget.style.borderColor =
                                                "#e5e7eb"
                                        }}
                                        placeholder="예: TAEHO"
                                    />
                                </div>
                            </div>
                        </div>

                        {/* 신부 정보 */}
                        <div style={{ marginBottom: "25px" }}>
                            <h3
                                style={{
                                    fontSize: "16px",
                                    fontWeight: 600,
                                    color: "#111827",
                                    margin: "0 0 12px 0",
                                    letterSpacing: "-0.01em",
                                }}
                            >
                                신부 정보
                            </h3>
                            <div
                                style={{
                                    display: "grid",
                                    gridTemplateColumns: "1fr 1fr",
                                    gap: "15px",
                                }}
                            >
                                <div>
                                    <label
                                        style={{
                                            display: "block",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            color: "#374151",
                                            marginBottom: "5px",
                                        }}
                                    >
                                        한글 이름
                                    </label>
                                    <input
                                        type="text"
                                        value={pageSettings.bride_name_kr}
                                        onChange={(e) =>
                                            setPageSettings({
                                                ...pageSettings,
                                                bride_name_kr: e.target.value,
                                            })
                                        }
                                        style={{
                                            width: "100%",
                                            padding: "10px",
                                            border: "1px solid #d1d5db",
                                            borderRadius: "6px",
                                            fontSize: "14px",
                                            outline: "none",
                                            boxSizing: "border-box",
                                        }}
                                        placeholder="예: 박보름"
                                    />
                                </div>
                                <div>
                                    <label
                                        style={{
                                            display: "block",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            color: "#374151",
                                            marginBottom: "5px",
                                        }}
                                    >
                                        영문 이름
                                    </label>
                                    <input
                                        type="text"
                                        value={pageSettings.bride_name_en}
                                        onChange={(e) =>
                                            setPageSettings({
                                                ...pageSettings,
                                                bride_name_en: e.target.value,
                                            })
                                        }
                                        style={{
                                            width: "100%",
                                            padding: "10px",
                                            border: "1px solid #d1d5db",
                                            borderRadius: "6px",
                                            fontSize: "14px",
                                            outline: "none",
                                            boxSizing: "border-box",
                                        }}
                                        placeholder="예: BORUM"
                                    />
                                </div>
                            </div>
                        </div>

                        {/* 예식 정보: 캘린더 탭으로 이동 */}
                        {false && (
                            <div style={{ marginBottom: "25px" }}>
                                <h3
                                    style={{
                                        fontSize: "16px",
                                        fontWeight: 600,
                                        color: "#111827",
                                        margin: "0 0 12px 0",
                                        letterSpacing: "-0.01em",
                                    }}
                                >
                                    예식 정보
                                </h3>

                                {/* 예식 날짜 */}
                                <div style={{ marginBottom: "15px" }}>
                                    <label
                                        style={{
                                            display: "block",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            color: "#374151",
                                            marginBottom: "5px",
                                        }}
                                    >
                                        예식 날짜
                                    </label>
                                    <input
                                        type="date"
                                        value={pageSettings.wedding_date}
                                        onChange={(e) =>
                                            setPageSettings({
                                                ...pageSettings,
                                                wedding_date: e.target.value,
                                            })
                                        }
                                        style={{
                                            width: "100%",
                                            padding: "10px",
                                            border: "1px solid #d1d5db",
                                            borderRadius: "6px",
                                            fontSize: "14px",
                                            outline: "none",
                                            boxSizing: "border-box",
                                        }}
                                    />
                                </div>

                                {/* 예식 시간 */}
                                <div style={{ marginBottom: "15px" }}>
                                    <label
                                        style={{
                                            display: "block",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            color: "#374151",
                                            marginBottom: "5px",
                                        }}
                                    >
                                        예식 시간
                                    </label>
                                    <div
                                        style={{
                                            display: "grid",
                                            gridTemplateColumns: "1fr auto 1fr",
                                            gap: "10px",
                                            alignItems: "center",
                                        }}
                                    >
                                        <select
                                            value={pageSettings.wedding_hour}
                                            onChange={(e) =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    wedding_hour:
                                                        e.target.value,
                                                })
                                            }
                                            style={{
                                                padding: "10px",
                                                border: "1px solid #d1d5db",
                                                borderRadius: "6px",
                                                fontSize: "14px",
                                                outline: "none",
                                            }}
                                        >
                                            {Array.from(
                                                { length: 24 },
                                                (_, i) => {
                                                    const hour = i
                                                        .toString()
                                                        .padStart(2, "0")
                                                    const displayHour =
                                                        i === 0
                                                            ? "12 AM"
                                                            : i === 12
                                                              ? "12 PM"
                                                              : i < 12
                                                                ? `${i} AM`
                                                                : `${i - 12} PM`
                                                    return (
                                                        <option
                                                            key={hour}
                                                            value={hour}
                                                        >
                                                            {displayHour}
                                                        </option>
                                                    )
                                                }
                                            )}
                                        </select>
                                        <span
                                            style={{
                                                fontSize: "14px",
                                                color: "#6b7280",
                                            }}
                                        >
                                            :
                                        </span>
                                        <select
                                            value={pageSettings.wedding_minute}
                                            onChange={(e) =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    wedding_minute:
                                                        e.target.value,
                                                })
                                            }
                                            style={{
                                                padding: "10px",
                                                border: "1px solid #d1d5db",
                                                borderRadius: "6px",
                                                fontSize: "14px",
                                                outline: "none",
                                            }}
                                        >
                                            {[
                                                "00",
                                                "10",
                                                "20",
                                                "30",
                                                "40",
                                                "50",
                                            ].map((minute) => (
                                                <option
                                                    key={minute}
                                                    value={minute}
                                                >
                                                    {minute}분
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                </div>

                                {/* 예식장 정보 */}
                                <div
                                    style={{
                                        display: "grid",
                                        gridTemplateColumns: "1fr 1fr",
                                        gap: "15px",
                                    }}
                                >
                                    <div>
                                        <label
                                            style={{
                                                display: "block",
                                                fontSize: "14px",
                                                fontWeight: "500",
                                                color: "#374151",
                                                marginBottom: "5px",
                                            }}
                                        >
                                            예식장 이름
                                        </label>
                                        <input
                                            type="text"
                                            value={pageSettings.venue_name}
                                            onChange={(e) =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    venue_name: e.target.value,
                                                })
                                            }
                                            style={{
                                                width: "100%",
                                                padding: "10px",
                                                border: "1px solid #d1d5db",
                                                borderRadius: "6px",
                                                fontSize: "14px",
                                                outline: "none",
                                                boxSizing: "border-box",
                                            }}
                                            placeholder="예: 더그랜드컨벤션웨딩홀"
                                        />
                                    </div>
                                    <div>
                                        <label
                                            style={{
                                                display: "block",
                                                fontSize: "14px",
                                                fontWeight: "500",
                                                color: "#374151",
                                                marginBottom: "5px",
                                            }}
                                        >
                                            예식장 주소
                                        </label>
                                        <input
                                            type="text"
                                            value={pageSettings.venue_address}
                                            onChange={(e) =>
                                                setPageSettings({
                                                    ...pageSettings,
                                                    venue_address:
                                                        e.target.value,
                                                })
                                            }
                                            style={{
                                                width: "100%",
                                                padding: "10px",
                                                border: "1px solid #d1d5db",
                                                borderRadius: "6px",
                                                fontSize: "14px",
                                                outline: "none",
                                                boxSizing: "border-box",
                                            }}
                                            placeholder="예: 서울시 강남구 테헤란로 123"
                                        />
                                    </div>
                                </div>

                                {/* 캘린더 하이라이트 설정 */}
                                <div
                                    style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        gap: "20px",
                                        marginTop: "20px",
                                    }}
                                >
                                    {/* 첫 번째 줄: 모양과 배경 색상 */}
                                    <div
                                        style={{ display: "flex", gap: "20px" }}
                                    >
                                        <div style={{ flex: 1 }}>
                                            <label
                                                style={{
                                                    display: "block",
                                                    fontSize: "14px",
                                                    fontWeight: "500",
                                                    color: "#374151",
                                                    marginBottom: "5px",
                                                }}
                                            >
                                                캘린더 하이라이트 모양
                                            </label>
                                            <select
                                                value={
                                                    pageSettings.highlight_shape
                                                }
                                                onChange={(e) =>
                                                    setPageSettings({
                                                        ...pageSettings,
                                                        highlight_shape:
                                                            e.target.value,
                                                    })
                                                }
                                                style={{
                                                    width: "100%",
                                                    padding: "10px",
                                                    border: "1px solid #d1d5db",
                                                    borderRadius: "6px",
                                                    fontSize: "14px",
                                                    outline: "none",
                                                    boxSizing: "border-box",
                                                    backgroundColor: "white",
                                                }}
                                            >
                                                <option value="circle">
                                                    원형
                                                </option>
                                                <option value="heart">
                                                    하트
                                                </option>
                                            </select>
                                        </div>
                                        <div style={{ flex: 1 }}>
                                            <label
                                                style={{
                                                    display: "block",
                                                    fontSize: "14px",
                                                    fontWeight: "500",
                                                    color: "#374151",
                                                    marginBottom: "5px",
                                                }}
                                            >
                                                하이라이트 배경 색상
                                            </label>
                                            <input
                                                type="color"
                                                value={
                                                    pageSettings.highlight_color
                                                }
                                                onChange={(e) =>
                                                    setPageSettings({
                                                        ...pageSettings,
                                                        highlight_color:
                                                            e.target.value,
                                                    })
                                                }
                                                style={{
                                                    width: "100%",
                                                    height: "42px",
                                                    padding: "2px",
                                                    border: "1px solid #d1d5db",
                                                    borderRadius: "6px",
                                                    outline: "none",
                                                    boxSizing: "border-box",
                                                    cursor: "pointer",
                                                }}
                                            />
                                        </div>
                                    </div>

                                    {/* 두 번째 줄: 텍스트 색상과 미리보기 */}
                                    <div
                                        style={{ display: "flex", gap: "20px" }}
                                    >
                                        <div style={{ flex: 1 }}>
                                            <label
                                                style={{
                                                    display: "block",
                                                    fontSize: "14px",
                                                    fontWeight: "500",
                                                    color: "#374151",
                                                    marginBottom: "5px",
                                                }}
                                            >
                                                하이라이트 텍스트 색상
                                            </label>
                                            <select
                                                value={
                                                    pageSettings.highlight_text_color
                                                }
                                                onChange={(e) =>
                                                    setPageSettings({
                                                        ...pageSettings,
                                                        highlight_text_color:
                                                            e.target.value,
                                                    })
                                                }
                                                style={{
                                                    width: "100%",
                                                    padding: "10px",
                                                    border: "1px solid #d1d5db",
                                                    borderRadius: "6px",
                                                    fontSize: "14px",
                                                    outline: "none",
                                                    boxSizing: "border-box",
                                                    backgroundColor: "white",
                                                }}
                                            >
                                                <option value="black">
                                                    검정
                                                </option>
                                                <option value="white">
                                                    흰색
                                                </option>
                                            </select>
                                        </div>
                                        <div style={{ flex: 1 }}>
                                            <label
                                                style={{
                                                    display: "block",
                                                    fontSize: "14px",
                                                    fontWeight: "500",
                                                    color: "#374151",
                                                    marginBottom: "5px",
                                                }}
                                            >
                                                미리보기
                                            </label>
                                            <div
                                                style={{
                                                    width: "100%",
                                                    height: "42px",
                                                    border: "1px solid #d1d5db",
                                                    borderRadius: "6px",
                                                    display: "flex",
                                                    alignItems: "center",
                                                    justifyContent: "center",
                                                    backgroundColor: "#f9f9f9",
                                                    position: "relative",
                                                }}
                                            >
                                                {/* 미리보기 하이라이트 */}
                                                <div
                                                    style={{
                                                        position: "relative",
                                                        width: "31px",
                                                        height: "31px",
                                                        display: "flex",
                                                        alignItems: "center",
                                                        justifyContent:
                                                            "center",
                                                    }}
                                                >
                                                    {pageSettings.highlight_shape ===
                                                    "heart" ? (
                                                        <svg
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            width="24"
                                                            height="21"
                                                            viewBox="0 0 16 14"
                                                            fill="none"
                                                            style={{
                                                                position:
                                                                    "absolute",
                                                                top: "50%",
                                                                left: "50%",
                                                                transform:
                                                                    "translate(-50%, -40%)",
                                                                zIndex: 0,
                                                            }}
                                                        >
                                                            <g clipPath="url(#clip0_preview)">
                                                                <g
                                                                    style={{
                                                                        mixBlendMode:
                                                                            "multiply",
                                                                    }}
                                                                >
                                                                    <path
                                                                        d="M8.21957 1.47997C8.08957 1.59997 7.99957 1.73997 7.87957 1.85997C7.75957 1.73997 7.66957 1.59997 7.53957 1.47997C3.08957 -2.76003 -2.51043 2.94997 1.21957 7.84997C2.91957 10.08 5.58957 11.84 7.86957 13.43C10.1596 11.83 12.8196 10.08 14.5196 7.84997C18.2596 2.94997 12.6596 -2.76003 8.19957 1.47997H8.21957Z"
                                                                        fill={
                                                                            pageSettings.highlight_color
                                                                        }
                                                                    />
                                                                </g>
                                                            </g>
                                                            <defs>
                                                                <clipPath id="clip0_preview">
                                                                    <rect
                                                                        width="15.76"
                                                                        height="13.44"
                                                                        fill="white"
                                                                    />
                                                                </clipPath>
                                                            </defs>
                                                        </svg>
                                                    ) : (
                                                        <div
                                                            style={{
                                                                position:
                                                                    "absolute",
                                                                width: "31px",
                                                                height: "31px",
                                                                borderRadius:
                                                                    "50%",
                                                                backgroundColor:
                                                                    pageSettings.highlight_color,
                                                                zIndex: 0,
                                                            }}
                                                        />
                                                    )}
                                                    <div
                                                        style={{
                                                            fontSize: "14px",
                                                            fontFamily:
                                                                "Pretendard SemiBold",
                                                            fontWeight: "600",
                                                            color: pageSettings.highlight_text_color,
                                                            zIndex: 1,
                                                            position:
                                                                "relative",
                                                        }}
                                                    >
                                                        18
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button
                                    onClick={savePageSettings}
                                    disabled={settingsLoading}
                                    style={{
                                        width: "100%",
                                        padding: "16px 24px",
                                        backgroundColor: settingsLoading
                                            ? "#e0e0e0"
                                            : "#000000",
                                        color: settingsLoading
                                            ? "#666666"
                                            : "white",
                                        border: "none",
                                        borderRadius: "0",
                                        fontSize: "16px",
                                        fontWeight: "500",
                                        cursor: settingsLoading
                                            ? "not-allowed"
                                            : "pointer",
                                        marginTop: "24px",
                                    }}
                                >
                                    {settingsLoading
                                        ? "저장 중..."
                                        : "기본 정보 저장"}
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* 포토섹션 탭 - 아코디언으로 이동 */}

            {/* 청첩장 탭 - 아코디언으로 이동 */}

            {/* 캘린더 탭 - 아코디언으로 이동 */}





            {/* 연락처 편집 모달 */}
            <AnimatePresence>
                {isEditingContact && selectedContact && (
                    <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        style={{
                            position: "fixed",
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0,
                            backgroundColor: "rgba(0, 0, 0, 0.5)",
                            zIndex: 1000,
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            padding: "20px",
                        }}
                    >
                        <motion.div
                            initial={{ scale: 0.8, opacity: 0 }}
                            animate={{ scale: 1, opacity: 1 }}
                            exit={{ scale: 0.8, opacity: 0 }}
                            style={{
                                backgroundColor: "white",
                                borderRadius: "10px",
                                padding: "22px 18px 18px 18px",
                                width: "100%",
                                maxWidth: "none",
                                margin: "0 auto",
                                maxHeight: "80vh",
                                overflow: "auto",
                                boxSizing: "border-box",
                            }}
                        >
                            <h2
                                style={{
                                    fontSize: "24px",
                                    fontWeight: "600",
                                    marginBottom: "20px",
                                    color: "#1f2937",
                                }}
                            >
                                {selectedContact.id
                                    ? "연락처 편집"
                                    : "새 연락처 추가"}
                            </h2>

                            <div
                                style={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: "28px",
                                    marginBottom: "20px",
                                }}
                            >
                                {/* 페이지 ID */}
                                <div style={{ marginBottom: "10px" }}>
                                    <label
                                        style={{
                                            display: "block",
                                            fontSize: "14px",
                                            fontWeight: "500",
                                            color: "#374151",
                                            marginBottom: "5px",
                                        }}
                                    >
                                        페이지 ID (현재 선택된 페이지)
                                    </label>
                                    <input
                                        type="text"
                                        value={currentPageId}
                                        disabled
                                        style={{
                                            width: "100%",
                                            padding: "10px",
                                            border: "1px solid #d1d5db",
                                            borderRadius: "6px",
                                            fontSize: "14px",
                                            outline: "none",
                                            backgroundColor: "#f3f4f6",
                                            color: "#888",
                                        }}
                                    />
                                </div>

                                {/* 신랑측 정보 */}
                                <div
                                    style={{
                                        background: "#f8fafc",
                                        borderRadius: "8px",
                                        padding: "14px 10px 8px 10px",
                                        boxShadow: "0 1px 2px rgba(0,0,0,0.03)",
                                    }}
                                >
                                    <h3
                                        style={{
                                            fontSize: "16px",
                                            fontWeight: "600",
                                            color: "#1f2937",
                                            marginBottom: "10px",
                                        }}
                                    >
                                        신랑측 정보
                                    </h3>
                                    <InputField
                                        label="신랑 이름"
                                        value={selectedContact.groom_name}
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_name",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 전화번호"
                                        value={selectedContact.groom_phone}
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_phone",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 계좌번호"
                                        value={selectedContact.groom_account}
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_account",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 은행명"
                                        value={selectedContact.groom_bank}
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_bank",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 아버지 이름"
                                        value={
                                            selectedContact.groom_father_name
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_father_name",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 아버지 전화번호"
                                        value={
                                            selectedContact.groom_father_phone
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_father_phone",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 아버지 계좌번호"
                                        value={
                                            selectedContact.groom_father_account
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_father_account",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 아버지 은행명"
                                        value={
                                            selectedContact.groom_father_bank
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_father_bank",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 어머니 이름"
                                        value={
                                            selectedContact.groom_mother_name
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_mother_name",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 어머니 전화번호"
                                        value={
                                            selectedContact.groom_mother_phone
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_mother_phone",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 어머니 계좌번호"
                                        value={
                                            selectedContact.groom_mother_account
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_mother_account",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신랑 어머니 은행명"
                                        value={
                                            selectedContact.groom_mother_bank
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "groom_mother_bank",
                                                value
                                            )
                                        }
                                    />
                                </div>

                                {/* 신부측 정보 */}
                                <div
                                    style={{
                                        background: "#f8fafc",
                                        borderRadius: "8px",
                                        padding: "14px 10px 8px 10px",
                                        boxShadow: "0 1px 2px rgba(0,0,0,0.03)",
                                    }}
                                >
                                    <h3
                                        style={{
                                            fontSize: "16px",
                                            fontWeight: "600",
                                            color: "#1f2937",
                                            marginBottom: "10px",
                                        }}
                                    >
                                        신부측 정보
                                    </h3>
                                    <InputField
                                        label="신부 이름"
                                        value={selectedContact.bride_name}
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_name",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 전화번호"
                                        value={selectedContact.bride_phone}
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_phone",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 계좌번호"
                                        value={selectedContact.bride_account}
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_account",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 은행명"
                                        value={selectedContact.bride_bank}
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_bank",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 아버지 이름"
                                        value={
                                            selectedContact.bride_father_name
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_father_name",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 아버지 전화번호"
                                        value={
                                            selectedContact.bride_father_phone
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_father_phone",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 아버지 계좌번호"
                                        value={
                                            selectedContact.bride_father_account
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_father_account",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 아버지 은행명"
                                        value={
                                            selectedContact.bride_father_bank
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_father_bank",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 어머니 이름"
                                        value={
                                            selectedContact.bride_mother_name
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_mother_name",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 어머니 전화번호"
                                        value={
                                            selectedContact.bride_mother_phone
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_mother_phone",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 어머니 계좌번호"
                                        value={
                                            selectedContact.bride_mother_account
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_mother_account",
                                                value
                                            )
                                        }
                                    />
                                    <InputField
                                        label="신부 어머니 은행명"
                                        value={
                                            selectedContact.bride_mother_bank
                                        }
                                        onChange={(value) =>
                                            handleContactInputChange(
                                                "bride_mother_bank",
                                                value
                                            )
                                        }
                                    />
                                </div>
                            </div>

                            {/* 버튼 */}
                            <div
                                style={{
                                    display: "flex",
                                    gap: "10px",
                                    justifyContent: "flex-end",
                                }}
                            >
                                <motion.button
                                    onClick={() => {
                                        setIsEditingContact(false)
                                        setSelectedContact(null)
                                    }}
                                    style={{
                                        padding: "10px 20px",
                                        backgroundColor: "#6b7280",
                                        color: "white",
                                        border: "none",
                                        borderRadius: "6px",
                                        fontSize: "14px",
                                        cursor: "pointer",
                                    }}
                                    whileHover={{ scale: 1.05 }}
                                    whileTap={{ scale: 0.95 }}
                                >
                                    취소
                                </motion.button>
                                <motion.button
                                    onClick={handleSaveContact}
                                    disabled={loading}
                                    style={{
                                        padding: "10px 20px",
                                        backgroundColor: loading
                                            ? "#9ca3af"
                                            : "#10b981",
                                        color: "white",
                                        border: "none",
                                        borderRadius: "6px",
                                        fontSize: "14px",
                                        cursor: loading
                                            ? "not-allowed"
                                            : "pointer",
                                    }}
                                    whileHover={!loading ? { scale: 1.05 } : {}}
                                    whileTap={!loading ? { scale: 0.95 } : {}}
                                >
                                    {loading ? "저장 중..." : "저장"}
                                </motion.button>
                            </div>
                        </motion.div>
                    </motion.div>
                )}
            </AnimatePresence>

            {null}
        </div>
    )
}

// 교통안내 입력 탭 컴포넌트
function TransportTab({
    pageId,
    tokenGetter,
}: {
    pageId: string
    tokenGetter: () => string | null
}): JSX.Element {
    type TransportItem = {
        id?: string
        title: string
        description: string
        display_order: number
    }

    const DEFAULT_ITEMS: TransportItem[] = [
        {
            title: "버스",
            description: "버스 번호와 정류장을 입력해주세요",
            display_order: 1,
        },
        {
            title: "지하철",
            description: "지하철 호선과 하차역을 입력해주세요",
            display_order: 2,
        },
    ]

    const [items, setItems] = React.useState<TransportItem[]>(DEFAULT_ITEMS)
    const [locationName, setLocationName] = React.useState<string>("")
    const [loading, setLoading] = React.useState(false)
    const [saving, setSaving] = React.useState(false)
    const [errorMsg, setErrorMsg] = React.useState<string>("")
    const [successMsg, setSuccessMsg] = React.useState<string>("")

    React.useEffect(() => {
        let mounted = true
        const getApiBases = () => {
            const bases: string[] = []
            try {
                if (typeof window !== "undefined" && window.location?.origin) {
                    bases.push(window.location.origin)
                }
            } catch {}
            bases.push(PROXY_BASE_URL)
            return Array.from(new Set(bases.filter(Boolean)))
        }
        const request = async (path: string, init?: RequestInit) => {
            const bases = getApiBases()
            let lastRes: Response | null = null
            let lastErr: any = null
            for (const base of bases) {
                try {
                    const res = await fetch(`${base}${path}`, init)
                    if (res.ok) return res
                    lastRes = res
                } catch (e) {
                    lastErr = e
                }
            }
            if (lastRes) return lastRes
            throw lastErr || new Error("Network error")
        }
        async function load() {
            if (!pageId) return
            setLoading(true)
            setErrorMsg("")
            try {
                const res = await request(
                    `/api/page-settings?transport&pageId=${encodeURIComponent(pageId)}`
                )
                if (!res.ok) throw new Error(`load failed: ${res.status}`)
                const result = await res.json()
                if (mounted && result?.success) {
                    if (Array.isArray(result.data)) {
                        const loaded: TransportItem[] = result.data.map(
                            (it: any, idx: number) => ({
                                id: it.id,
                                title: String(it.title ?? ""),
                                description: String(it.description ?? ""),
                                display_order: Number(
                                    it.display_order ?? idx + 1
                                ),
                            })
                        )
                        setItems(loaded.length > 0 ? loaded : DEFAULT_ITEMS)
                    }
                    if (result.locationName) {
                        setLocationName(String(result.locationName))
                    }
                } else if (mounted) {
                    setItems(DEFAULT_ITEMS)
                }
            } catch (_e) {
                if (mounted) setItems(DEFAULT_ITEMS)
            } finally {
                if (mounted) setLoading(false)
            }
        }
        load()
        return () => {
            mounted = false
        }
    }, [pageId])

    const addItem = () => {
        setItems((prev) => [
            ...prev,
            {
                title: "교통편",
                description: "상세 항목",
                display_order: prev.length + 1,
            },
        ])
    }

    const move = (index: number, dir: -1 | 1) => {
        setItems((prev) => {
            const next = [...prev]
            const ni = index + dir
            if (ni < 0 || ni >= next.length) return prev
            const temp = next[index]
            next[index] = next[ni]
            next[ni] = temp
            return next.map((it, i) => ({ ...it, display_order: i + 1 }))
        })
    }

    const change = (
        index: number,
        field: "title" | "description",
        value: string
    ) => {
        setItems((prev) =>
            prev.map((it, i) => (i === index ? { ...it, [field]: value } : it))
        )
    }

    // 텍스트 포맷팅 함수들
    const insertFormat = (index: number, format: "bold" | "small") => {
        const textareaId = `description-${index}`
        const textarea = document.getElementById(
            textareaId
        ) as HTMLTextAreaElement
        if (!textarea) return

        const start = textarea.selectionStart
        const end = textarea.selectionEnd
        const selectedText = textarea.value.substring(start, end)
        const beforeText = textarea.value.substring(0, start)
        const afterText = textarea.value.substring(end)

        let newText = ""
        let cursorOffset = 0

        if (format === "bold") {
            if (selectedText) {
                newText = `${beforeText}*${selectedText}*${afterText}`
                cursorOffset = start + selectedText.length + 2
            } else {
                newText = `${beforeText}*텍스트*${afterText}`
                cursorOffset = start + 1
            }
        } else if (format === "small") {
            if (selectedText) {
                newText = `${beforeText}{${selectedText}}${afterText}`
                cursorOffset = start + selectedText.length + 2
            } else {
                newText = `${beforeText}{텍스트}${afterText}`
                cursorOffset = start + 1
            }
        }

        // 값 업데이트
        change(index, "description", newText)

        // 커서 위치 복원 (다음 렌더링 이후)
        setTimeout(() => {
            const updatedTextarea = document.getElementById(
                textareaId
            ) as HTMLTextAreaElement
            if (updatedTextarea) {
                updatedTextarea.focus()
                updatedTextarea.setSelectionRange(cursorOffset, cursorOffset)
            }
        }, 0)
    }

    const save = async () => {
        if (!pageId) {
            setErrorMsg("페이지 ID가 필요합니다")
            return
        }
        setSaving(true)
        setErrorMsg("")
        setSuccessMsg("")
        try {
            const token = tokenGetter?.() || ""
            const getApiBases = () => {
                const bases: string[] = []
                try {
                    if (
                        typeof window !== "undefined" &&
                        window.location?.origin
                    ) {
                        bases.push(window.location.origin)
                    }
                } catch {}
                bases.push(PROXY_BASE_URL)
                return Array.from(new Set(bases.filter(Boolean)))
            }
            const bases = getApiBases()
            let res: Response | null = null
            let text = ""
            for (const base of bases) {
                try {
                    const tryRes = await fetch(
                        `${base}/api/page-settings?transport`,
                        {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                ...(token
                                    ? { Authorization: `Bearer ${token}` }
                                    : {}),
                            },
                            body: JSON.stringify({
                                pageId,
                                items,
                                locationName,
                            }),
                        }
                    )
                    res = tryRes
                    text = await tryRes.text()
                    if (tryRes.ok) break
                } catch (e) {
                    // continue to next base
                }
            }
            if (!res) throw new Error("network error")
            let result: any = {}
            try {
                result = JSON.parse(text)
            } catch {
                result = { raw: text }
            }
            if (!res.ok || !result?.success) {
                throw new Error(
                    result?.message || result?.error || text || "저장 실패"
                )
            }
            setSuccessMsg("교통안내가 저장되었습니다.")
        } catch (e: any) {
            setErrorMsg(e?.message || "저장 중 오류가 발생했습니다")
        } finally {
            setSaving(false)
            setTimeout(() => {
                setErrorMsg("")
                setSuccessMsg("")
            }, 3000)
        }
    }

    return (
        <div
            style={{
                width: "100%",
                display: "flex",
                flexDirection: "column",
                gap: 48,
                alignItems: "flex-start",
            }}
        >
            {/* 식장 이름 */}
            <div
                style={{
                    width: "100%",
                    display: "flex",
                    flexDirection: "column",
                    gap: 8,
                    alignItems: "flex-start",
                }}
            >
                <div
                    style={{
                        textAlign: "center",
                        color: "black",
                        fontSize: 12,
                        fontFamily: "Pretendard",
                        fontWeight: 600,
                    }}
                >
                    식장 이름
                </div>
                <div
                    style={{
                        textAlign: "center",
                        color: "#AEAEAE",
                        fontSize: 12,
                        fontFamily: "Pretendard",
                        fontWeight: 400,
                    }}
                >
                    식장 이름에 홀 이름을 쓰고싶다면 여기에 써주세요
                </div>
                <input
                    style={{
                        flex: 1,
                        height: 40,
                        padding: 12,
                        background: "white",
                        border: "0.5px solid #E5E6E8",
                        outlineOffset: -0.25,
                        fontSize: 12,
                        fontFamily: "Pretendard",
                        fontWeight: 400,
                        color: "#ADADAD",
                        width: "100%",
                    }}
                    placeholder="그랜드볼룸, 사파이어홀"
                    value={locationName}
                    onChange={(e) => setLocationName(e.target.value)}
                />
            </div>

            {loading ? (
                <div style={{ padding: 12, color: "#6b7280" }}>
                    불러오는 중...
                </div>
            ) : (
                <div>
                    {items.map((item, index) => (
                        <div
                            key={index}
                            style={{
                                width: "100%",
                                padding: 12,
                                border: "0.5px solid #E5E6E8",
                                outlineOffset: -0.5,
                                display: "flex",
                                flexDirection: "column",
                                gap: 8,
                                alignItems: "flex-start",
                            }}
                        >
                            <div
                                style={{
                                    width: "100%",
                                    display: "flex",
                                    justifyContent: "space-between",
                                    alignItems: "center",
                                }}
                            >
                                <div
                                    style={{
                                        textAlign: "center",
                                        color: "black",
                                        fontSize: 12,
                                        fontFamily: "Pretendard",
                                        fontWeight: 600,
                                    }}
                                >
                                    교통 안내
                                </div>
                                <div
                                    style={{
                                        display: "flex",
                                        gap: 4,
                                        alignItems: "center",
                                    }}
                                >
                                    <button
                                        onClick={() => move(index, -1)}
                                        disabled={index === 0}
                                        style={{
                                            padding: 6,
                                            border: "1px solid #E5E6E8",
                                            outlineOffset: -1,
                                            background: "white",
                                            cursor:
                                                index === 0
                                                    ? "not-allowed"
                                                    : "pointer",
                                            opacity: index === 0 ? 0.5 : 1,
                                        }}
                                    >
                                        <div
                                            style={{
                                                width: 16,
                                                height: 16,
                                                padding: "13px 9px",
                                                display: "flex",
                                                flexDirection: "column",
                                                justifyContent: "center",
                                                alignItems: "center",
                                            }}
                                        >
                                            <div
                                                style={{
                                                    width: 12,
                                                    height: 5.5,
                                                    border: "1.5px solid #757575",
                                                    borderRadius: 1,
                                                }}
                                            />
                                        </div>
                                    </button>
                                    <button
                                        onClick={() => move(index, 1)}
                                        disabled={index === items.length - 1}
                                        style={{
                                            padding: 6,
                                            border: "1px solid #E5E6E8",
                                            outlineOffset: -1,
                                            background: "white",
                                            cursor:
                                                index === items.length - 1
                                                    ? "not-allowed"
                                                    : "pointer",
                                            opacity:
                                                index === items.length - 1
                                                    ? 0.5
                                                    : 1,
                                        }}
                                    >
                                        <div
                                            style={{
                                                width: 16,
                                                height: 16,
                                                padding: "13px 9px",
                                                display: "flex",
                                                flexDirection: "column",
                                                justifyContent: "center",
                                                alignItems: "center",
                                            }}
                                        >
                                            <div
                                                style={{
                                                    width: 12,
                                                    height: 5.5,
                                                    border: "1.5px solid #757575",
                                                    borderRadius: 1,
                                                    transform: "rotate(180deg)",
                                                }}
                                            />
                                        </div>
                                    </button>
                                </div>
                            </div>
                            <input
                                style={{
                                    width: "100%",
                                    height: 40,
                                    padding: 12,
                                    background: "white",
                                    border: "0.5px solid #E5E6E8",
                                    outlineOffset: -0.25,
                                    fontSize: 12,
                                    fontFamily: "Pretendard",
                                    fontWeight: 400,
                                    color:
                                        item.title === "" ? "#ADADAD" : "black",
                                }}
                                placeholder="버스"
                                value={item.title}
                                onChange={(e) =>
                                    change(index, "title", e.target.value)
                                }
                            />
                            <textarea
                                id={`description-${index}`}
                                style={{
                                    width: "100%",
                                    height: 120,
                                    padding: 12,
                                    background: "white",
                                    border: "0.5px solid #E5E6E8",
                                    outlineOffset: -0.25,
                                    fontSize: 12,
                                    fontFamily: "Pretendard",
                                    fontWeight: 400,
                                    color:
                                        item.description === ""
                                            ? "#ADADAD"
                                            : "black",
                                    resize: "none",
                                }}
                                placeholder="상세 항목을 입력해주세요"
                                value={item.description}
                                onChange={(e) =>
                                    change(index, "description", e.target.value)
                                }
                            />
                            <div
                                style={{
                                    width: "100%",
                                    display: "flex",
                                    justifyContent: "flex-end",
                                    gap: 4,
                                    alignItems: "center",
                                }}
                            >
                                <button
                                    type="button"
                                    onClick={() => insertFormat(index, "bold")}
                                    style={{
                                        padding: "4px 8px",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.5,
                                        background: "white",
                                        cursor: "pointer",
                                        fontSize: 10,
                                        fontFamily: "Pretendard",
                                        fontWeight: 400,
                                        color: "#7F7F7F",
                                        lineHeight: "20px",
                                    }}
                                    title="선택한 텍스트를 두껍게 (*텍스트*)"
                                >
                                    볼드
                                </button>
                                <button
                                    type="button"
                                    onClick={() => insertFormat(index, "small")}
                                    style={{
                                        padding: "4px 8px",
                                        border: "0.5px solid #E5E6E8",
                                        outlineOffset: -0.5,
                                        background: "white",
                                        cursor: "pointer",
                                        fontSize: 10,
                                        fontFamily: "Pretendard",
                                        fontWeight: 400,
                                        color: "#7F7F7F",
                                        lineHeight: "20px",
                                    }}
                                    title="선택한 텍스트를 작게 ({텍스트})"
                                >
                                    작게
                                </button>
                            </div>
                        </div>
                    ))}
                    <button
                        onClick={addItem}
                        style={{
                            width: "100%",
                            height: 40,
                            padding: 12,
                            background: "#ECECEC",
                            border: "0.5px solid #E5E6E8",
                            outlineOffset: -0.25,
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            cursor: "pointer",
                            fontSize: 12,
                            fontFamily: "Inter",
                            fontWeight: 400,
                            color: "black",
                        }}
                    >
                        + 안내 추가
                    </button>
                </div>
            )}
        </div>
    )
}

// 입력 필드 컴포넌트
function InputField({
    label,
    value,
    onChange,
}: {
    label: string
    value: string
    onChange: (value: string) => void
}): JSX.Element {
    return (
        <div style={{ marginBottom: 12, maxWidth: "none", margin: "0 auto 0 0" }}>
            <label
                style={{
                    display: "block",
                    fontSize: 12,
                    fontWeight: 500,
                    color: "#6b7280",
                    marginBottom: 6,
                    letterSpacing: "0.02em",
                    textTransform: "uppercase",
                }}
            >
                {label}
            </label>
            <input
                type="text"
                value={value}
                onChange={(e) => onChange(e.target.value)}
                style={{
                    width: "100%",
                    padding: "11px 12px",
                    border: "1px solid #e5e7eb",
                    borderRadius: 8,
                    fontSize: 14,
                    outline: "none",
                    boxSizing: "border-box",
                    backgroundColor: "#ffffff",
                    color: "#111827",
                    transition: "border-color .15s ease",
                }}
                onFocus={(e) => {
                    e.currentTarget.style.borderColor = "#9ca3af"
                }}
                onBlur={(e) => {
                    e.currentTarget.style.borderColor = "#e5e7eb"
                }}
            />
        </div>
    )
}

// Property Controls
addPropertyControls(AdminNew, {
    maxSizeKB: {
        type: ControlType.Number,
        title: "목표 파일 크기",
        min: 100,
        max: 5000,
        step: 100,
        unit: "KB",
        defaultValue: 1024,
    },
})
